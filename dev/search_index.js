var documenterSearchIndex = {"docs":
[{"location":"internals/parser/#Parser","page":"Parser","title":"Parser","text":"","category":"section"},{"location":"internals/parser/","page":"Parser","title":"Parser","text":"Modules = [Norg.Parser]","category":"page"},{"location":"internals/parser/","page":"Parser","title":"Parser","text":"Modules = [Norg.Parser]","category":"page"},{"location":"internals/parser/#Norg.Parser","page":"Parser","title":"Norg.Parser","text":"This module defines the Parser.parse_norg function, which builds an AST from a token list.\n\nThe role of Parser.parse_norg is to consume tokens. To do so, it relies on Match.match_norg to take decisions on how to consume tokens.\n\n\n\n\n\n","category":"module"},{"location":"internals/parser/#Norg.Parser.parse_norg","page":"Parser","title":"Norg.Parser.parse_norg","text":"parse_norg(strategy, tokens, i)\n\nTry to parse the tokens sequence starting at index i using a given strategy.\n\n\n\n\n\n","category":"function"},{"location":"internals/parser/#Norg.Parser.parse_norg-Tuple{Vector{Norg.Tokens.Token}}","page":"Parser","title":"Norg.Parser.parse_norg","text":"parse_norg(tokens)\n\nTry to parse the tokens sequence as an AST.NorgDocument starting from the begining of the sequence.\n\n\n\n\n\n","category":"method"},{"location":"internals/parser/#Norg.Parser.parse_norg_dispatch-Tuple{Norg.Kinds.Kind, Vector{Norg.Kinds.Kind}, Vector{Norg.Tokens.Token}, Any}","page":"Parser","title":"Norg.Parser.parse_norg_dispatch","text":"Main dispatch utility.\n\n\n\n\n\n","category":"method"},{"location":"internals/match/#Match","page":"Match","title":"Match","text":"","category":"section"},{"location":"internals/match/","page":"Match","title":"Match","text":"Modules = [Norg.Match]","category":"page"},{"location":"internals/match/","page":"Match","title":"Match","text":"Modules = [Norg.Match]","category":"page"},{"location":"internals/match/#Norg.Match","page":"Match","title":"Norg.Match","text":"This module exports Match.match_norg which matches token sequences to Kinds.Kind AST nodes.\n\n\n\n\n\n","category":"module"},{"location":"internals/match/#Norg.Match.MatchResult","page":"Match","title":"Norg.Match.MatchResult","text":"Holds results of Match.match_norg. It has a Kinds.kind, that can be found, can be closing (i.e. closing an attached modifier), continued (as in \"ignore this token and continue parsing\"). Whether the parser should  consume or not the current token is given by the consume field.\n\n\n\n\n\n","category":"type"},{"location":"internals/match/#Norg.Match.match_norg","page":"Match","title":"Norg.Match.match_norg","text":"match_norg([strategy], parents, tokens, i)\n\nFind the appropriate Kinds.Kind for a token when parser is inside a parents block parsing the tokens list at index i.\n\nReturn a Match.MatchResult.\n\n\n\n\n\n","category":"function"},{"location":"internals/codegen/html/#HTMLCodegen","page":"HTMLCodegen","title":"HTMLCodegen","text":"","category":"section"},{"location":"internals/codegen/html/","page":"HTMLCodegen","title":"HTMLCodegen","text":"Modules = [Norg.Codegen.HTMLCodegen]","category":"page"},{"location":"internals/codegen/html/#Norg.Codegen.HTMLCodegen","page":"HTMLCodegen","title":"Norg.Codegen.HTMLCodegen","text":"HTML code generation using HypertextLiteral.jl.\n\n\n\n\n\n","category":"module"},{"location":"internals/codegen/html/#Norg.Codegen.HTMLCodegen.FootnotesLevel","page":"HTMLCodegen","title":"Norg.Codegen.HTMLCodegen.FootnotesLevel","text":"Controls the position where footnotes are rendered. It can be within the lowest heading level i by setting HiFootnotes or at the root of the document or directly as it appears in the Norg document.\n\n\n\n\n\n","category":"type"},{"location":"internals/codegen/html/#Norg.Codegen.HTMLCodegen.HTMLLocationTarget","page":"HTMLCodegen","title":"Norg.Codegen.HTMLCodegen.HTMLLocationTarget","text":"A special target for link location, this ensure type-stability.\n\n\n\n\n\n","category":"type"},{"location":"internals/codegen/html/#Norg.Codegen.HTMLCodegen.HTMLTarget","page":"HTMLCodegen","title":"Norg.Codegen.HTMLCodegen.HTMLTarget","text":"HTML target to feed codegen.\n\n\n\n\n\n","category":"type"},{"location":"internals/scanners/#Scanners","page":"Scanners","title":"Scanners","text":"","category":"section"},{"location":"internals/scanners/","page":"Scanners","title":"Scanners","text":"Modules = [Norg.Scanners]","category":"page"},{"location":"internals/scanners/","page":"Scanners","title":"Scanners","text":"Modules = [Norg.Scanners]","category":"page"},{"location":"internals/scanners/#Norg.Scanners","page":"Scanners","title":"Norg.Scanners","text":"Provides the scanners for the tokenizer.\n\nThe role of a scanner is to recognize a sequence of characters and to produce a ScanResult.\n\n\n\n\n\n","category":"module"},{"location":"internals/scanners/#Norg.Scanners.NORG_LINE_ENDING","page":"Scanners","title":"Norg.Scanners.NORG_LINE_ENDING","text":"All the UTF-8 characters that Norg specifies as a whitespace.\n\n\n\n\n\n","category":"constant"},{"location":"internals/scanners/#Norg.Scanners.NORG_PUNCTUATION","page":"Scanners","title":"Norg.Scanners.NORG_PUNCTUATION","text":"All the UTF-8 characters that are punctuation in Norg specification. See the norg specification\n\n\n\n\n\n","category":"constant"},{"location":"internals/scanners/#Norg.Scanners.TOKENKIND_PARSING_ORDER","page":"Scanners","title":"Norg.Scanners.TOKENKIND_PARSING_ORDER","text":"All the registered Kinds.Kind that Scanners.scan will try when consuming entries.\n\n\n\n\n\n","category":"constant"},{"location":"internals/scanners/#Norg.Scanners.ScanResult","page":"Scanners","title":"Norg.Scanners.ScanResult","text":"Stores the result of a scanning operation. If length is 0 that means that no  matching token was found.\n\n\n\n\n\n","category":"type"},{"location":"internals/scanners/#Norg.Scanners.scan","page":"Scanners","title":"Norg.Scanners.scan","text":"scan(pattern, input)\n\nScan the given input for the given pattern.\n\nIt will produce a Scanners.ScanResult.\n\nIf pattern is given, then try to fit the given patter at the start of input. If pattern is :\n\na ScanStrategy subtype : scan with the given strategy (e.g. Word or Whitespace) \na Kind : parse for the given kind.\nan AbstractString : input must startswith pattern.\nan AbstractArray : call scan on each element of pattern until one matches.\na Set{Char} : first character must be included in pattern.\n\n\n\n\n\n","category":"function"},{"location":"internals/scanners/#Norg.Scanners.scan-Tuple{Any}","page":"Scanners","title":"Norg.Scanners.scan","text":"scan(input; line=0, charnum=0)\n\nScan the given input for Scanners.TOKENKIND_PARSING_ORDER until one returns a successful Scanners.ScanResult or throw an error if none succeed.\n\nThis will return a Tokens.Token.\n\n\n\n\n\n","category":"method"},{"location":"internals/codegen/json/#JSONCodegen","page":"JSONCodegen","title":"JSONCodegen","text":"","category":"section"},{"location":"internals/codegen/json/","page":"JSONCodegen","title":"JSONCodegen","text":"Modules = [Norg.Codegen.JSONCodegen]","category":"page"},{"location":"internals/codegen/json/#Norg.Codegen.JSONCodegen","page":"JSONCodegen","title":"Norg.Codegen.JSONCodegen","text":"Pandoc AST code generation. The best reference of Pandoc's AST I could find is here\n\nThe code generated consists in OrderedDicts from OrderedCollections.jl that follow the Pandoc JSON AST API. You can then export using e.g. JSON.jl.\n\n\n\n\n\n","category":"module"},{"location":"internals/codegen/json/#Norg.Codegen.JSONCodegen.JSONTarget","page":"JSONCodegen","title":"Norg.Codegen.JSONCodegen.JSONTarget","text":"JSON target to feed codegen.\n\n\n\n\n\n","category":"type"},{"location":"internals/ast/#AST","page":"AST","title":"AST","text":"","category":"section"},{"location":"internals/ast/","page":"AST","title":"AST","text":"Modules = [Norg.AST]","category":"page"},{"location":"internals/ast/","page":"AST","title":"AST","text":"Modules = [Norg.AST]","category":"page"},{"location":"internals/ast/#Norg.AST","page":"AST","title":"Norg.AST","text":"This module defines the Abstract Syntax Trees (AST) associated with the norg format.\n\n\n\n\n\n","category":"module"},{"location":"internals/ast/#Norg.AST.Node","page":"AST","title":"Norg.AST.Node","text":"An AST Node has a kind (e.g. Bold), can have children Nodes, and refer to tokens in the token array.\n\n\n\n\n\n","category":"type"},{"location":"internals/ast/#Norg.AST.NorgDocument","page":"AST","title":"Norg.AST.NorgDocument","text":"Stores the Abstract Syntax Tree (AST) for a Norg document. It implements the AbstractTrees.jl interface.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Norg-internals","page":"How parsing works","title":"Norg internals","text":"","category":"section"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"This page describes the internals of Norg.jl and how it parses .norg files.","category":"page"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"There are three main steps for turning Norg files into HTML (since it's the only supported target for now).","category":"page"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"Tokenizing (identifying the different chunks of code)\nParsing (create an Abstract Syntax Tree, AST)\nCode generation (turning the AST into HTML)","category":"page"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"Pages=[\"internals.md\"]","category":"page"},{"location":"internals/#Notes-on-using-Julia's-dispatch-system","page":"How parsing works","title":"Notes on using Julia's dispatch system","text":"","category":"section"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"Earlier Norg.jl would rely on Julia's type system, but that made the code type-unstable. That's why I refactored it using a kind of enumeration to label each token and node of the AST. I did not invent anything here, it comes straight from JuliaSyntax.jl super cool ideas. See Norg.Kinds.","category":"page"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"That does not mean that the native type system is not used. Rather, there are some dispatch functions that are basically big if statements that dispatch a given Norg.Kinds.Kind towards what's called a strategy in Norg.jl. Then the native dispatch system can take the hand and dispatch towards the right method. This allows making the code type-stable for the compiler and improves greatly performances.","category":"page"},{"location":"internals/#Tokenization","page":"How parsing works","title":"Tokenization","text":"","category":"section"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"The first step for parsing Norg documents is transforming the input string into a more friendly array of token. A Norg.Tokens.Token labels a chunk of text according to the significance the parser could give it. For example there are token kinds for line endings, words, whitespaces, the * character... Note that a token can span several characters. This is the case for words, but also for whitespaces.","category":"page"},{"location":"internals/#Parsing","page":"How parsing works","title":"Parsing","text":"","category":"section"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"The second step consist in turning the array of tokens into an Abstract Syntax Tree (AST). To do so, Norg.jl relies on two functions: Norg.Match.match_norg and Norg.Parser.parse_norg. The role of the former is to match a sequence of tokens to a parsing strategy, while the latter does the actual parsing. For example, while parsing a paragraph, if Norg.Match.match_norg encounters two tokens of kind LineEnding, then it returns a closing match of kind Paragraph. It is then up to parse_norg to properly close the current paragraph.","category":"page"},{"location":"internals/#Code-generation","page":"How parsing works","title":"Code generation","text":"","category":"section"},{"location":"internals/","page":"How parsing works","title":"How parsing works","text":"The third and last step consist in generating code output from the AST. Norg.jl defines several code generation targets in the Norg.Codegen module. Code generation is fairly simple, as it simply walks the AST and turn each node into the correct output node. For example, a level one heading would be turned into an HTML <h1> node when generating code for the HTMLTarget target.","category":"page"},{"location":"1.0-specification/","page":"Specification","title":"Specification","text":"This is an automated rendering of the norg specification using Norg.jl.","category":"page"},{"location":"1.0-specification/#Table-of-contents","page":"Specification","title":"Table of contents","text":"","category":"section"},{"location":"1.0-specification/","page":"Specification","title":"Specification","text":"<ul><li><a href='#h1-norg-file-format-specification'>Norg File Format Specification</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-introduction'>Introduction</a>\n<ul>\n    <li><a href='#h2-what-is-norg'>What is Norg?</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-preliminaries'>Preliminaries</a>\n<ul>\n    <li><a href='#h2-characters'>Characters</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-words'>Words</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-paragraph-segments'>Paragraph Segments</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-paragraphs'>Paragraphs</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-detached-modifiers'>Detached Modifiers</a>\n<ul>\n    <li><a href='#h2-structural-detached-modifiers'>Structural Detached Modifiers</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-heading-level-1'>Heading level 1</a>\n<ul>\n    <li><a href='#h2-heading-level-2'>Heading level 2</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-nestable-detached-modifiers'>Nestable Detached Modifiers</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-range-able-detached-modifiers'>Range-able Detached Modifiers</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-grouping'>Grouping</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-delimiting-modifiers'>Delimiting Modifiers</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-heading-level-1'>Heading level 1</a>\n<ul>\n    <li><a href='#h2-heading-level-2'>Heading level 2</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-heading-level-1'>Heading level 1</a>\n<ul>\n    <li><a href='#h2-heading-level-2'>Heading level 2</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h3-horizontal-rule'>Horizontal Rule</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-heading-level-1'>Heading level 1</a>\n<ul>\n    <li><a href='#h2-detached-modifier-extensions'>Detached Modifier Extensions</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-'></a>\n<ul>\n    <li><a href='#h2-detached-modifier-suffix'>Detached Modifier Suffix</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-tags'>Tags</a>\n<ul>\n    <li><a href='#h2-link-modifier'>Link Modifier</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li><li><a href='#h1-contextual-delimiter-the-pipe-character-is-a-really-nice-character-it-can-be-applied-to-many-problems'>Contextual ` Delimiter\n  The pipe (`) character is a really nice character - it can be applied to many problems</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-intersecting-modifiers'>Intersecting Modifiers</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-linkables'>Linkables</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-linkable'>linkable}</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-link-location'>Link Location</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-i-am-a-level-1-heading'>I am a level 1 heading</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h3-custom-detached-modifiers'>Custom Detached Modifiers</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h3-inline-linkables'>Inline Linkables</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h3-differences-between-file-linkables'>Differences Between File Linkables</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h3-scoping'>Scoping</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-link-description'>Link Description</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-links'>Links</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-anchors'>Anchors</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-inline-link-targets'>Inline Link Targets</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-valid-invalid-examples'>Valid/Invalid Examples</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-text'>text}</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-text'>text</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-standard-library'>Standard Library</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-precedence'>Precedence</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h1-layers'>Layers</a>\n<ul>\n    <li><a href='#h2-layer-1'>Layer 1</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-layer-2'>Layer 2</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-layer-3'>Layer 3</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-layer-4'>Layer 4</a>\n<ul>\n    \n</ul>\n</li><li><a href='#h2-layer-5'>Layer 5</a>\n<ul>\n    \n</ul>\n</li>\n</ul>\n</li></ul>\n<div class=\"norg\">\n    <section id='section-h1-norg-file-format-specification'>\n<h1 id='h1-norg-file-format-specification'>Norg File Format Specification</h1>\n<p>  This file contains the formal file format specification of the Norg syntax version 1.0.  This document is written in the Norg format in its original form and, thus, attempts to be  self-documenting.</p><p>  Please note that this is <b>not</b> a reference implementation - this is an established rule set that  should be strictly followed.</p>\n</section>\n<section id='section-h1-introduction'>\n<h1 id='h1-introduction'>Introduction</h1>\n<p>  Before diving into the details we will start with an introduction. The Norg file format was  designed as part of the <a href='https://github.com/nvim-neorg/neorg'>Neorg</a> plugin for Neovim which was  started by <i>Vhyrro (@vhyrro)</i> in April 2021. Soon after starting this work, <i>Max Rossmannek  (@mrossinek)</i> joined the development team, and, with the help of the <a href='#'>Neorg</a> community, the two  have shaped the Norg syntax to what it has become today.</p><section id='section-h2-what-is-norg'>\n<h2 id='h2-what-is-norg'>What is Norg?</h2>\n<p>   The Norg syntax is a <i>structured</i> plain-text file format which aims to be human-readable when   viewed standalone while also providing a suite of markup utilities for typesetting structured   documents. Compared to other plain-text file formats like e.g. Markdown, Org, RST or AsciiDoc, it   sets itself apart most notably by following a strict philosophy to abide by the following simple   rules:</p><ol><li><p><b>Consistency</b> the syntax should be consistent. Even if you know only a part of the syntax,     learning new parts should not be surprising and rather feel predictable and intuitive.</p></li><li><p><b>Unambiguity</b> the syntax should leave <ins>no</ins> room for ambiguity. This is especially motivated by     the use of <a href='https://tree-sitter.github.io/tree-sitter/'>tree-sitter</a> for the original syntax     parser, which takes a strict left-to-right parsing approach and only has single-character     look-ahead.</p></li><li><p><b><a href='https://en.wikipedia.org/wiki/Free-form_language'>Free-form</a></b> whitespace is <ins>only</ins> used to     delimit tokens but has no other significance! This is probably the most contrasting feature to     other plain-text formats which often adhere to the     <a href='https://en.wikipedia.org/wiki/Off-side_rule'>off-side rule</a>, meaning that the syntax relies on     whitespace-indentation to carry meaning.</p></li></ol><p>   Although built with <a href='#'>Neorg</a> in mind, Norg can be utilized in a wide range of applications,   from external note-taking plugins to even messaging applications. Thanks to its <a href='#h1-layers'>layer</a>   system one can choose the feature set they&apos;d like to support and can ignore the higher levels.</p>\n</section>\n\n</section>\n<section id='section-h1-preliminaries'>\n<h1 id='h1-preliminaries'>Preliminaries</h1>\n<p>  First, we define some basic concepts which will be used in this specification.</p><section id='section-h2-characters'>\n<h2 id='h2-characters'>Characters</h2>\n<p>   A Norg file is made up of <i>characters</i>.   A <span id='character'>character</span> is any Unicode <a href='https://en.wikipedia.org/wiki/Code_point'>code point</a> or   <a href='https://www.unicode.org/glossary/#grapheme'>grapheme</a>.</p><section id='section-h3-whitespace'>\n<h3 id='h3-whitespace'>Whitespace</h3>\n<p>    A <a href='#h2-characters'>character</a> is considered <b>whitespace</b> if it is any of the following:</p><ul><li><p>The regular space <code>U+0020</code></p></li><li><p>A tab <code>U+0009</code></p></li><li><p>Any code point in the      <a href='https://www.fileformat.info/info/unicode/category/Zs/list.htm'>Unicode Zs general category</a></p></li></ul><p>    Any combination of the above is also considered whitespace.</p><p>    Tabs are not expanded to spaces and since whitespace has no semantic meaning there is no need    to define a default tab stop. However, if a parser must (for implementation reasons) define a    tab stop, we suggest setting it to 4 spaces.</p>\n</section>\n<section id='section-h3-line-endings'>\n<h3 id='h3-line-endings'>Line Endings</h3>\n<p>    Line endings in Norg serve as a termination character. They are used e.g. to terminate    <a href='#h2-paragraph-segments'>paragraph segments</a>, <a href='#h2-paragraphs'>paragraphs</a> and other elements like the endings of <a href='#h2-range-able-detached-modifiers'>range-able\n    detached modifiers</a>. They are not considered <a href='#h3-whitespace'>whitespace</a>.</p><p>    The following chars are considered line endings:</p><ul><li><p>A line feed <code>U+000A</code></p></li><li><p>A form feed <code>U+000C</code></p></li><li><p>A carriage return <code>U+000D</code></p></li></ul><p>    The following line ending combinations are permitted:</p><ul><li><p>A single line feed</p></li><li><p>A single carriage return</p></li><li><p>A carriage return immediately followed by a line feed</p></li></ul>\n</section>\n<section id='section-h3-punctuation'>\n<h3 id='h3-punctuation'>Punctuation</h3>\n<p>    A <a href='#h2-characters'>character</a> is considered <b>punctuation</b> if it is any of the following:</p><ul><li><p>A standard ASCII punctuation character: <code>!&quot;#$%&amp;&apos;()*+,-./:;&lt;=>?@[\\]^_`{|}~</code></p></li><li><p>Anything in the general Unicode categories <code>Pc</code>, <code>Pd</code>, <code>Pe</code>, <code>Pf</code>, <code>Pi</code>, <code>Po</code> or <code>Ps</code>.</p></li></ul>\n</section>\n<section id='section-h3-escaping'>\n<h3 id='h3-escaping'>Escaping</h3>\n<p>    A single <a href='#h2-characters'>character</a> can be escaped if it is immediately preceded by a backslash,    <code>\\</code> (<code>U+005C</code>). Any <a href='#h2-characters'>character</a> may be escaped <i>apart from</i> <a href='#h2-characters'>characters</a>    within free-form and ranged verbatim segments (see <a href='#h2-free-form-attached-modifiers'>free-form attached modifiers</a> and    <a href='#h3-verbatim-ranged-tags'>verbatim ranged tags</a>).    For more information about precedence, take a look at the <a href='#h1-precedence'>precedence</a> section.</p>\n</section>\n<section id='section-h3-regular-characters'>\n<h3 id='h3-regular-characters'>Regular Characters</h3>\n<p>    Any other character not described by the preceding sections is treated as a generic code    point/character.</p>\n</section>\n\n</section>\n<section id='section-h2-words'>\n<h2 id='h2-words'>Words</h2>\n<p>   The Norg format is designed to be parsed on a word-by-word basis from left-to-right through the   entire document <i>in a single pass</i>. This is possible because the language is <a href='#'>free-form</a>, meaning   that whitespace has no semantic meaning, and because the markup follows strict rules which are   outlined in the later sections of this document.</p><p>   A <b>word</b> is considered to be any combination of <a href='#h2-characters'>characters</a> which are neither   <a href='#h3-whitespace'>whitespace</a> nor <a href='#h3-punctuation'>punctuation</a> (see <a href='#h3-regular-characters'>regular characters</a>).</p>\n</section>\n<section id='section-h2-paragraph-segments'>\n<h2 id='h2-paragraph-segments'>Paragraph Segments</h2>\n<p>   <a href='#h2-words'>Words</a> are first combined into <b>paragraph segments</b>. A paragraph segment may then contain any   inline element of type:</p><ul><li><p><a href='#h1-attached-modifiers'>attached modifiers</a></p></li><li><p><a href='#h1-linkables'>linkables</a></p></li></ul><p>   Usually, a <a href='#h3-line-endings'>line ending</a> terminates the paragraph segment.   This means that a paragraph segment is for the most part just a line of text:   |example   I am a paragraph segment.   I am another paragraph segment.   Together we form a paragraph.   |end</p><p>   The exception to the rule is whenever a linkable or attached modifier within the paragraph   segment spans more than a single line, in which case the paragraph segment also spans that   distance. For example:   |example   I <b>am   a long paragraph segment!</b>   |end</p>\n</section>\n<section id='section-h2-paragraphs'>\n<h2 id='h2-paragraphs'>Paragraphs</h2>\n<p>   Paragraphs are then formed of consecutive <a href='#h2-paragraph-segments'>paragraph segments</a>. A paragraph is terminated by:</p><ul><li><p>A <span id='paragraph-break'>paragraph break</span> (two consecutive <a href='#h3-line-endings'>line endings</a>)</p></li><li><p>Any of the <a href='#h1-detached-modifiers'>detached modifiers</a></p></li><li><p>Any of the <a href='#h2-delimiting-modifiers'>delimiting modifiers</a></p></li><li><p>Any of the <a href='#h2-ranged-tags'>ranged tags</a></p></li><li><p>Any of the <a href='#h3-strong-carryover-tags'>strong carryover tags</a></p></li></ul>\n</section>\n\n</section>\n<section id='section-h1-detached-modifiers'>\n<h1 id='h1-detached-modifiers'>Detached Modifiers</h1>\n<p>  Norg has several detached modifiers. The name originates from their differentiation to the  <a href='#h1-attached-modifiers'>attached modifiers</a>, which will be discussed later.</p><p>  All detached modifiers must abide by the following rules:</p><ul><li><p>A detached modifier can <ins>only</ins> occur at the beginning of the line (arbitrary <a href='#h3-whitespace'>whitespace</a>    (but nothing else!) may precede it)</p></li><li><p>A detached modifier must be immediately followed by <a href='#h3-whitespace'>whitespace</a> or another detached modifier    of the same type</p><ul><li><p><i>NOTE</i> in general a <a href='#h3-line-endings'>line ending</a> is <b>not</b> allowed as the whitespace following a detached     modifier. The only case where this is valid is for the <i>closing</i> modifier of the     <a href='#h2-range-able-detached-modifiers'>range-able detached modifiers</a>.</p></li></ul></li></ul><p>  The following table outlines all valid <b>detached modifiers</b>. It also adds various possible  properties to each category which will be explained in more detail below.  : . : Character  : > : Name  : > : Categories  : _ : <code>*</code>  : > : Headings  :: ></p><ul><li><p>Structural</p></li><li><p>Nestable  ::  : _ : <code>-</code>  : > : Unordered Lists  :: ></p></li><li><p>Nestable  ::  : _ : <code>~</code>  : > : Ordered Lists  :: ></p></li><li><p>Nestable  ::  : _ : <code>></code>  : > : Quotes  :: ></p></li><li><p>Nestable  ::  : _ : <code>$</code>  : > : Definitions  :: ></p></li><li><p>Range-able  ::  : _ : <code>^</code>  : > : Footnotes  :: ></p></li><li><p>Range-able  ::  : _ : <code>:</code>  : > : Table cells  :: ></p></li><li><p>Range-able  ::  : _ : <code>%</code>  : > : Attributes  :: ></p></li><li><p>Nestable  ::</p></li></ul><section id='section-h2-structural-detached-modifiers'>\n<h2 id='h2-structural-detached-modifiers'>Structural Detached Modifiers</h2>\n<p>   The first detached modifier type is the <i>structural</i> modifier type. As the name suggests,   modifiers under this category <b>structure</b> the Norg document in some form or another.</p><p>   After a structural modifier, one <a href=''>paragraph segment</a> is consumed as the   <i>title</i> of the modifier.</p><p>   A property of structural detached modifiers is that they consume <b>all</b> other non-structural   detached modifiers, lower-level structural modifiers, inline markup and <a href='#h2-paragraphs'>paragraphs</a>;   they are the most important detached modifier in the hierarchy of modifiers.</p><p>   To manually terminate a structural detached modifier (like a heading) you must use a   <a href='#h2-delimiting-modifiers'>delimiting modifier</a>. Structural detached modifiers are automatically   closed when you use another structural modifier of the same or lower level.</p><section id='section-h3-headings'>\n<h3 id='h3-headings'>Headings</h3>\n<p>    |example</p>\n</section>\n\n</section>\n\n</section>\n<section id='section-h1-heading-level-1'>\n<h1 id='h1-heading-level-1'>Heading level 1</h1>\n<section id='section-h2-heading-level-2'>\n<h2 id='h2-heading-level-2'>Heading level 2</h2>\n<section id='section-h3-heading-level-3'>\n<h3 id='h3-heading-level-3'>Heading level 3</h3>\n<section id='section-h4-heading-level-4'>\n<h4 id='h4-heading-level-4'>Heading level 4</h4>\n<section id='section-h5-heading-level-5'>\n<h5 id='h5-heading-level-5'>Heading level 5</h5>\n<section id='section-h6-heading-level-6'>\n<h6 id='h6-heading-level-6'>Heading level 6</h6>\n<section id='section-h6-heading-level-7-falls-back-to-level-6-in-the-tree-sitter-parser'>\n<h6 id='h6-heading-level-7-falls-back-to-level-6-in-the-tree-sitter-parser'>Heading level 7 (falls back to level 6 in the tree-sitter parser)</h6>\n<p>    |end</p><p>    Although headings are both structural <i>and</i> nestable (see next section), the former takes    precedence over the latter, meaning that headings only affect a single    <a href='#h2-paragraph-segments'>paragraph segment</a> as their title. This is for user convenience as it    does not require an empty line right below a heading. Because of this precedence, headings are    also non-<a href='#h2-grouping'>grouping</a>.</p><p>    Headings serve as a way to categorize and organize other elements into smaller chunks for better    readability. They are currently the <i>only</i> structural detached modifier present in the Norg    syntax.</p>\n</section>\n\n</section>\n\n</section>\n\n</section>\n\n</section>\n\n</section>\n<section id='section-h2-nestable-detached-modifiers'>\n<h2 id='h2-nestable-detached-modifiers'>Nestable Detached Modifiers</h2>\n<p>   Nestable detached modifiers are a kind which may be repeated multiple times in order to produce a   <ins>nested</ins> object of the given type. The nesting levels are capped at 6 in the <a href='#'>tree-sitter</a> parser   but longer repetitions of the same modifier are allowed, falling back to the sixth nesting level.   Other parsers may choose to support higher (or infinite) nesting levels.</p><p>   Furthermore, in contrast to most other (standard) <a href='#h1-detached-modifiers'>detached modifiers</a>, this detached modifier   type has <i>no</i> title, and affects the following <code>paragraph</code> instead of only the next   <a href=''>paragraph segment</a>. Said paragraph then becomes the modifier&apos;s <i>content</i>.   This means that in order to terminate the detached modifier contents, you need two consecutive   <a href='#h3-line-endings'>line endings</a> (see <a href=''>paragraph break</a>).</p><p>   Below you will find some examples of nestable detached modifiers.</p><section id='section-h3-unordered-lists'>\n<h3 id='h3-unordered-lists'>Unordered Lists</h3>\n<p>    |example</p><ul><li><p>Unordered list level 1</p><ul><li><p>Unordered list level 2</p><ul><li><p>Unordered list level 3</p><ul><li><p>Unordered list level 4</p><ul><li><p>Unordered list level 5</p><ul><li><p>Unordered list level 6</p><ul><li><p>Unordered list level 7 (falls back to level 6 in the tree-sitter parser)</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><p>Unordered list level 1      This text is still part of the level 1 list item.</p><ul><li><p>Unordered list level 2       This text is still part of the level 2 list item.</p><ul><li><p>Unordered list level 3        This text is still part of the level 3 list item.</p><ul><li><p>Unordered list level 4         This text is still part of the level 4 list item.</p><ul><li><p>Unordered list level 5          This text is still part of the level 5 list item.</p><ul><li><p>Unordered list level 6           This text is still part of the level 6 list item.</p><ul><li><p>Unordered list level 7 (falls back to level 6 in the tree-sitter parser)            This text is still part of the level 7 list item.    |end</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>    Unordered lists provide an easy way to enumerate items in an unordered fashion. Useful for data    that&apos;s categorically similar but doesn&apos;t need to follow a strict order.</p>\n</section>\n<section id='section-h3-ordered-lists'>\n<h3 id='h3-ordered-lists'>Ordered Lists</h3>\n<p>    |example</p><ol><li><p>Ordered list level 1</p><ol><li><p>Ordered list level 2</p><ol><li><p>Ordered list level 3</p><ol><li><p>Ordered list level 4</p><ol><li><p>Ordered list level 5</p><ol><li><p>Ordered list level 6</p><ol><li><p>Ordered list level 7 (falls back to level 6 in the tree-sitter parser)</p></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><ol><li><p>Ordered list level 1      This text is still part of the level 1 list item.</p><ol><li><p>Ordered list level 2       This text is still part of the level 2 list item.</p><ol><li><p>Ordered list level 3        This text is still part of the level 3 list item.</p><ol><li><p>Ordered list level 4         This text is still part of the level 4 list item.</p><ol><li><p>Ordered list level 5          This text is still part of the level 5 list item.</p><ol><li><p>Ordered list level 6           This text is still part of the level 6 list item.</p><ol><li><p>Ordered list level 7 (falls back to level 6 in the tree-sitter parser)            This text is still part of the level 7 list item.    |end</p></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><p>    This list type is only useful for data that needs to be kept in sequence. In contrast to other    formats which may use a syntax like <code>1.</code>/<code>1)</code>, Norg counts the items automatically - this    reduces complexity and makes reordering items simple.</p>\n</section>\n<section id='section-h3-quotes'>\n<h3 id='h3-quotes'>Quotes</h3>\n<p>    |example</p><blockquote><p>Quote level 1</p><blockquote><p>Quote level 2</p><blockquote><p>Quote level 3</p><blockquote><p>Quote level 4</p><blockquote><p>Quote level 5</p><blockquote><p>Quote level 6</p><blockquote><p>Quote level 7 (falls back to level 6 in the tree-sitter parser)</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><p>Quote level 1      This text is still part of the level 1 quote.</p><blockquote><p>Quote level 2       This text is still part of the level 2 quote.</p><blockquote><p>Quote level 3        This text is still part of the level 3 quote.</p><blockquote><p>Quote level 4         This text is still part of the level 4 quote.</p><blockquote><p>Quote level 5          This text is still part of the level 5 quote.</p><blockquote><p>Quote level 6           This text is still part of the level 6 quote.</p><blockquote><p>Quote level 7 (falls back to level 6 in the tree-sitter parser)            This text is still part of the level 7 quote.    |end</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>    Quotes are rather self-explanatory - they allow you to cite e.g. a passage from another source.</p>\n</section>\n<section id='section-h3-attributes'>\n<h3 id='h3-attributes'>Attributes</h3>\n<p>    |example    % attrib1    %% attrib2    %%% attrib3    %%%% attrib4    %%%%% attrib5    %%%%%% attrib6    |end    Attributes are detached modifiers that exist solely for the purpose of having altered behavior    through <a href='#h2-carryover-tags'>carryover tags</a>. These can then be referenced within <a href='#h2-attached-modifier-extensions'>attached modifier extensions</a>    and the tags applied to the attribute will be applied to the attached modifier with said attribute.</p><p>    These modifiers can be nested to create a hierarchy of attributes. Below is an example of this    in action:    |example    % color<div color='#FF0000'>    %% red</div><div color='#00FF00'>    %% green</div><div color='#0000FF'>    %% blue</div>    This will be <i>red</i>(color:red), <i>green</i>(color:green) and <i>blue</i>(color:blue).    |end</p><section id='section-h4-limits'>\n<h4 id='h4-limits'>Limits</h4>\n<p>     You can impose limits on where the attribute can be used through the <code>attribute-limits</code> tag,     which should be placed before the attribute definition. The tag takes in a list of the following     parameters:</p><ul><li><p><code>none</code> - no limits</p></li><li><p><code>verbatim</code> - can be used only for the `verbatim` attached modifier</p></li><li><p><code>math</code> - can be only used on the $mathematics$ attached modifier</p></li><li><p><code>macro</code> - can be only used on the inline &amp;macro&amp; attached modifier</p></li><li><p><code>links</code> - can only be used on links (this includes anchors)</p></li><li><p><code>non-verbatim</code> - for all the other non-verbatim attached modifiers (bold, italic, subscript,       superscript, underline, the null modifier etc.)</p></li></ul><p>     These limits can be chained, i.e. <code>#attribute-limits links non-verbatim</code>.</p>\n</section>\n\n</section>\n<section id='section-h3-invalid-nestable-detached-modifier-examples'>\n<h3 id='h3-invalid-nestable-detached-modifier-examples'>Invalid Nestable Detached Modifier Examples</h3>\n<p>    |example    >I am not a quote</p><p>    some preceding text > I am also not a quote</p><p>    >- I am not a valid detached modifier</p><blockquote><p>> I am only a level 1 quote</p></blockquote><p>    *        I am not a valid heading title.    |end</p>\n</section>\n\n</section>\n<section id='section-h2-range-able-detached-modifiers'>\n<h2 id='h2-range-able-detached-modifiers'>Range-able Detached Modifiers</h2>\n<p>   Range-able detached modifiers can occur in two forms:</p><ul><li><p>As a single detached modifier in which case they affect:</p><ul><li><p>The next <code>paragraph_segment</code> which becomes the <i>title</i></p></li><li><p>Any following paragraph which becomes the <i>content</i></p></li></ul></li><li><p>As a pair of two detached modifiers in which case:</p><ul><li><p>The next <code>paragraph_segment</code> also becomes the <i>title</i></p></li><li><p>The content continues until the &quot;closing&quot; detached modifier is found</p></li></ul></li></ul><p>   The closing modifier has the same rules as an opening detached modifier except it <i>must</i> be   directly succeeded by a <a href='#h3-line-endings'>line ending</a> in contrast to the whitespace character which must follow the   opening modifier.</p><section id='section-h3-definitions'>\n<h3 id='h3-definitions'>Definitions</h3>\n<p>    Definitions are primarily of use to people who write technical documents.    They consist of a term, and then are followed by a definition of that term.</p><p>    |example</p><dl><dt id='def_term'>Term</dt><dd><p>    Definition content.    |end</p></dd></dl><p>    To create longer definitions, use the ranged definition syntax instead:    |example</p><dl><dt id='def_term'>Term</dt><dd><p>    Content of the definition.</p><p>    Which scans up to the closing modifier.</p></dd></dl><p>    |end</p>\n</section>\n<section id='section-h3-footnotes'>\n<h3 id='h3-footnotes'>Footnotes</h3>\n<p>    Footnotes allow the user to give supplementary information related to some text without    polluting the paragraph itself. Footnotes can be linked to using <a href='#h1-linkables'>linkables</a>.</p><p>    |example</p><p>    To create longer footnotes, use the ranged footnote syntax instead:    |example</p><p>    |end</p>\n</section>\n<section id='section-h3-table-cells'>\n<h3 id='h3-table-cells'>Table Cells</h3>\n<p>    Table cells are used to, well, build up a table. Here are a few examples of table cells:    |example    : A1      Content of table cell at <code>A1</code>.    :: A2</p><blockquote><p>Content of table cell at <code>A2</code> (in a quote).    ::    |end    Their semantics are described in more detail in the <a href='1.0-semantics##h1-tables'>semantics</a> document,    which we recommend reading if you are interested in the behavior of objects as opposed to how    they are defined.</p></blockquote><p>    <b>NOTE</b> In order to make tables more aesthetically pleasing, they&apos;re commonly mixed with the    <a href='#h1-intersecting-modifiers'>intersecting modifier</a> syntax to produce the following:    |example    : A1 : Content of table cell at <code>A1</code>.    |end</p>\n</section>\n\n</section>\n<section id='section-h2-grouping'>\n<h2 id='h2-grouping'>Grouping</h2>\n<p>   Both nestable and range-able detached modifiers have a unique quality - when several consecutive   modifiers <i>of the same type</i> are encountered (by consecutive we mean <ins>NOT</ins> separated via a   <a href=''>paragraph break</a>), they are treated as one whole <span id='object'>object</span>. This is crucial to understand as   it is required for the many types of <a href='#h2-carryover-tags'>carryover tags</a> to function.</p><section id='section-h3-examples'>\n<h3 id='h3-examples'>Examples</h3>\n<p>    |example    The following items naturally group because they are range-able, for example forming a    definition list:</p><dl><dt id='def_term-1'>Term 1</dt><dd><p>      Definition 1!</p></dd><dt id='def_term-2'>Term 2</dt><dd><p>      Definition 2!    |end</p></dd></dl><p>    |example    Together, these form one whole unordered list:</p><ul><li><p>List item 1</p></li><li><p>List item 2    |end</p></li></ul><p>    |example</p><ul><li><p>List item in one list</p></li></ul><ul><li><p>This item is in another list, because we used a <a href=''>paragraph break</a> to split these items    |end</p></li></ul>\n</section>\n\n</section>\n<section id='section-h2-delimiting-modifiers'>\n<h2 id='h2-delimiting-modifiers'>Delimiting Modifiers</h2>\n<p>   In Norg, <a href='#h2-structural-detached-modifiers'>structural detached modifiers</a> and <a href='#h3-indent-segment'>indent segment</a>s may be terminated by a   delimiting modifier. This kind of modifier must abide by the following rules:</p><ul><li><p>A delimiting modifier can <ins>only</ins> occur at the beginning of the line (arbitrary <a href='#h3-whitespace'>whitespace</a>     (but nothing else!) may precede it)</p></li><li><p>A delimiting modifier must consist of two or more consecutive modifiers of the same     type (a single character cannot be used to avoid false-positives <i>during</i> the typing process;     plus a single character can look quite confusing/ugly when used like this...)</p></li><li><p>A delimiting modifier must be followed by an immediate <a href='#h3-line-endings'>line ending</a> (without any extra     <a href='#h3-whitespace'>whitespace</a>; this disambiguates them from nestable detached modifiers like for example an     unordered list item vs. the <code>--</code> delimiting modifier)</p></li></ul><section id='section-h3-weak-delimiting-modifier'>\n<h3 id='h3-weak-delimiting-modifier'>Weak Delimiting Modifier</h3>\n<p>    This modifier uses the <code>-</code> character and immediately closes the <i>current</i> nesting level    (decreases the current nesting level by one).    |example</p>\n</section>\n\n</section>\n\n</section>\n<section id='section-h1-heading-level-1'>\n<h1 id='h1-heading-level-1'>Heading level 1</h1>\n<p>      Text under first level heading.</p><section id='section-h2-heading-level-2'>\n<h2 id='h2-heading-level-2'>Heading level 2</h2>\n<p>       Text under second level heading.</p>\n</section>\n<p>      Text under first level heading again.    |end</p><section id='section-h3-strong-delimiting-modifier'>\n<h3 id='h3-strong-delimiting-modifier'>Strong Delimiting Modifier</h3>\n<p>    This modifier uses the <code>=</code> character and immediately closes all nesting levels.    |example</p>\n</section>\n\n</section>\n<section id='section-h1-heading-level-1'>\n<h1 id='h1-heading-level-1'>Heading level 1</h1>\n<p>      Text under first level heading.</p><section id='section-h2-heading-level-2'>\n<h2 id='h2-heading-level-2'>Heading level 2</h2>\n<p>       Text under second level heading.</p>\n</section>\n\n</section>\n<p>    Text belonging to no heading level (i.e. belonging to the document&apos;s root).    |end</p><section id='section-h3-horizontal-rule'>\n<h3 id='h3-horizontal-rule'>Horizontal Rule</h3>\n<p>    This modifier uses the <code>_</code> character and simply renders a horizontal line. It does <ins>NOT</ins>    affect the heading level but immediately terminates any <a href='#h2-paragraphs'>paragraph</a>.    |example</p>\n</section>\n<section id='section-h1-heading-level-1'>\n<h1 id='h1-heading-level-1'>Heading level 1</h1>\n<p>      Text under first level heading.</p><hr/><p>This is a new paragraph separated from the previous one by a horizontal line.      This text still belongs to the first level heading.    |end</p><section id='section-h2-detached-modifier-extensions'>\n<h2 id='h2-detached-modifier-extensions'>Detached Modifier Extensions</h2>\n<p>   <a href='#h1-detached-modifiers'>Detached modifiers</a> support extensions which must immediately follow the detached modifier   (or another extension). Note that <a href='#h1-detached-modifiers'>detached modifiers</a> must be succeeded with <a href=''>whitespace</a>,   therefore by &quot;immediately followed&quot; we mean <i>after</i> the whitespace character in the detached   modifier, e.g. <code>- (x) List item</code>(lang:norg).</p><p>   The syntax is as follows:</p><ul><li><p>An extension starts with a <code>(</code> char</p></li><li><p>Immediately a special character must follow. This character determines the type of extension.</p></li><li><p>Some extensions can support parameters - if this is the case, the special character must be     followed with <a href=''>whitespace</a> after which the parameters (a sequence of <a href='#h2-words'>words</a> and/or     newlines) ensue.     Not all extensions support parameters and for good reason. There is no need to attach extra     metadata to a done or undone state for instance. Several extensions should be delimited with     the <a href='#h1-contextual-delimiter'>contextual `|` delimiter</a>.</p></li><li><p>A <code>\\|</code> character may be matched, which allows the user to chain many extensions together, e.g.     <code>(x|# A)</code>(lang:norg) (done with a priority of A).</p></li><li><p>Finally a <code>)</code> char closes the extension.</p></li></ul><p>   NOTE: The whole detached modifier extension <i>must</i> be followed by whitespace.</p><section id='section-h3-todo-status-extension'>\n<h3 id='h3-todo-status-extension'>TODO Status Extension</h3>\n<p>    The TODO item extension assigns a task status to a certain modifier. You probably know this    concept from Org where unordered lists can become tasks. In Norg we take this concept to    the next level because any detached modifier can be assigned a task status. This can for    example be useful for the author of a document to keep track of the status of certain sections.</p><p>    The following characters are reserved for the TODO status extension:</p><ul><li><p><code> </code> undone (a literal space)</p></li><li><p><code>x</code> done</p></li><li><p><code>?</code> needs further input/clarification</p></li><li><p><code>!</code> urgent</p></li><li><p><code>+</code> recurring (with an optional <a href='#h4-timestamp-extension'>timestamp</a>)</p></li><li><p><code>-</code> in-progress/pending</p></li><li><p><code>=</code> on hold</p></li><li><p><code>_</code> put down/cancelled</p></li></ul><p>    Some examples include:    |example</p><ul><li><input type=\"checkbox\" disabled/><p>Undone</p></li><li><input checked type=\"checkbox\" disabled/><p>Done</p></li></ul><ul><li> <p>Undone with a priority of B</p></li><li><input type=\"checkbox\" disabled/><p>Recurring</p></li><li><input type=\"checkbox\" disabled/><p>5th Jan) Recurring every 5th of January    |end</p></li></ul>\n</section>\n<section id='section-h3-advanced-detached-modifier-extensions'>\n<h3 id='h3-advanced-detached-modifier-extensions'>Advanced Detached Modifier Extensions</h3>\n<p>    Apart from just being able to assign a TODO state it is also possible to apply more complex    states with parameters to certain indicators. Such examples are the <a href='#h4-timestamp-extension'>timestamp extension</a>    and the <a href='#h4-priority-extension'>priority extension</a>.    In the following sections you will find descriptions for a few other extensions supported within    Norg.</p><section id='section-h4-timestamp-extension'>\n<h4 id='h4-timestamp-extension'>Timestamp Extension</h4>\n<p>     The timestamp extension allows you to associate a <a href='#h1-detached-modifiers'>detached modifier</a>     with a date/time.     The syntax for a timestamp is as <a href='#fn_note-to-parser-developers'>follows</a>:     <code>&lt;day>,? &lt;day-of-month> &lt;month> &lt;year> &lt;time> &lt;timezone></code></p><ul><li><p>       The <code>&lt;day></code> value is reliant on the current locale, but the following alterations of that       value are permitted:</p><ul><li><p>Full version (e.g. <code>Tuesday</code>, <code>Wednesday</code>)</p></li><li><p>An unambiguous shorthand (a shorthand that can uniquely identify the day), e.g. <code>Tue</code>, <code>We</code>,          <code>M</code> (Monday), <code>Frid</code>. Something like <code>T</code> is not allowed, as both <code>Tuesday</code> and <code>Thursday</code>          could satisfy the input.</p></li></ul></li><li><p>The <code>,?</code> expression means that a <code>,</code> character may optionally exist in that location.</p></li><li><p>The <code>&lt;day-of-month></code> value is simply a numeric value with at most 3 digits (to disambiguate       it from the <code>&lt;year></code> value).</p></li><li><p>The <code>&lt;month></code> value is a word-based representation of the current month (i.e. <code>October</code>,       <code>January</code> etc.) dependent on the current locale. The same shorthand rules apply as in the       <code>&lt;day></code> value.</p></li><li><p>The <code>&lt;year></code> value must be a numeric value with at least 4 digits.</p></li><li><p>The <code>&lt;time></code> value must consist of this format (in regex): <code>\\d{1,2}:\\d{2}(\\.\\d{1,2})?</code>.       Some examples would be: <code>18:00</code>, <code>5:32</code>, <code>00:12.32</code>.</p></li></ul><p>     Obviously, you&apos;re not required to type the whole syntax out every time. Any of the elements in     angled brackets (<code>&lt;></code>) can be dropped/ignored, but the order of those values may not change!     Some examples of valid timestamps include:</p><ul><li><p><code>Sat, 29 Oct 1994 19:43.31 GMT</code></p></li><li><p><code>We 12th Jan 2022</code></p></li></ul><p>     Apart from just being able to supply a timestamp, you are also permitted to provide a <span id='range'>range</span>.     The syntax is simple, and is contained within the extension:     |example     <time datetime='2022-08-05 00:00:00/2022-08-20 00:00:00'>5th Aug 2022 - 20th August 2022</time>     <time datetime='2022-08-05 00:00:00/2022-08-20 00:00:00'>5th Aug 2022-20th August 2022</time> &lt;- Also valid     |end     You can even omit some fields from either one of the sides like so:     |example     <time datetime='2022-08-05 00:00:00/2022-08-20 00:00:00'>5th - 20th August 2022</time>     |end     The matching fields will be automatically completed based on the information of the other half.</p>\n</section>\n<section id='section-h4-priority-extension'>\n<h4 id='h4-priority-extension'>Priority Extension</h4>\n<p>     This extension allows you to specify a priority of your detached modifier extension.</p><p>     Syntax:     |example</p>\n</section>\n\n</section>\n\n</section>\n\n</section>\n<section id='section-h1'>\n<h1 id='h1'></h1>\nThis heading has priority A (highest priority)<p>     |end     Note that Norg does not specify strict semantics for this detached modifier extension, and as     such there is no set-in-stone way to specify priorities. The most common (and recommended) way     to specify priorities is to go from <code>A-Z</code>, but many also prefer <code>0-9</code> or even named priorities     like <code>LOW</code>/<code>MEDIUM</code>/<code>HIGH</code>.</p><p>     <a href='#'>Neorg</a>&apos;s <a href='https://hamberg.no/gtd'>GTD</a> implementation even repurposes the priority for use as     contexts, so yes, this detached modifier extension is very versatile.</p><section id='section-h4-due-date-extension'>\n<h4 id='h4-due-date-extension'>Due Date Extension</h4>\n<p>     As the name suggests, this extension marks something as &quot;due before x&quot;, where x is a     <a href='#h4-timestamp-extension'>timestamp</a>. Especially useful in <a href='#'>GTD</a> and other forms of note-taking and time management applications.</p><p>     Syntax:     |example</p><ul><li>&lt; Tue 5th Feb)<p>Do this before the 5th of February.     |end</p></li></ul>\n</section>\n<section id='section-h4-start-date-extension'>\n<h4 id='h4-start-date-extension'>Start Date Extension</h4>\n<p>     A counterpart to the <a href='#h4-due-date-extension'>due date extension</a> - defines when a task <b>begins</b>, also useful in     <a href='#'>GTD</a>.</p><p>     Syntax:     |example</p><ul><li>> Tue 5th Feb)<p>This task starts after the 5th of February.     |end</p></li></ul>\n</section>\n<section id='section-h2-detached-modifier-suffix'>\n<h2 id='h2-detached-modifier-suffix'>Detached Modifier Suffix</h2>\n<p>   Since <a href=''>nestable detached modifiers</a> can only contain a <a href=''>paragraph</a> this can   cause severe limitations because the insertion of e.g. code blocks is not possible. To alleviate   this deficiency, the <a href='#h2-detached-modifier-suffix'>detached modifier suffix</a> exists, which temporarily increases the   current indentation level to allow complex nested items within.</p><p>   There are two variations of the indent segment, the <a href=''>slide</a> and the <a href=''>indent segment</a>.   <b>NOTE</b> After a detached modifier suffix is matched (either <code>:</code> or <code>::<code>) a {*** line endings}[line ending] must\n   follow /instantly/.\n\n*** Slide\n    The slide, denoted with a single `:<code>, allows for a *single* /complex item/ below:\n    |example\n    - :\n      $ Term\n        This is the term&apos;s definition.\n    |end\n\n    This &lt;complex item> may be any *non-{** structural detached modifiers}[structural]* detached\n    modifier, {* tags}[tag] or paragraph.\n\n**** Carryover Tags in Slides\n     Due to greatly increased parser complexity in common LR/GLR parsers carryover tags beneath slides\n     are /disallowed/. Apply a carryover tag to the parent item to achieve the same behaviour\n     instead.\n\n     Disallowed:\n     |example\n     - :\n       #example-tag\n       $ Term\n         Definition\n     |end\n\n     Preferred alternative:\n     |example\n     +example-tag\n     - :\n       $ Term\n         Definition\n     |end\n\n*** Indent Segment\n    The indent segment, denoted with two colons (</code>:<code>), creates a ranged version of the slide.\n    This indent segment must be closed with any of the {** delimiting modifiers}, or an element of\n    the same type with the same or lower nesting level. By &quot;lower&quot; nesting level we mean higher up\n    in the hierarchy of nodes, or in other words `unordered_list_level_1</code> is &quot;lower&quot; than an\n    `unordered_list_level_2</code> item, because it is nested less.\n\n    The indent segment may contain an arbitrary amount of {# complex item}[complex items].\n\n    Examples:\n    |example\n    - ::\n      This is some content.\n\n      $ Term\n        Definition.\n    - This is the second item of the list.\n      The indent segment did not need to be terminated.\n\n    - ::\n      This is another list.\n\n      |details\n      *hello* world!\n      |end\n\n      -- This is a nested item in the indent segment\n      -- And so is this.\n\n      But you can still continue your content here.\n      ---\n\n    Since there was no other item of the same type after the indent segment\n    it must be closed with `---</code> or <code>===</code>.    |end</p>\n</section>\n\n</section>\n<section id='section-h1-tags'>\n<h1 id='h1-tags'>Tags</h1>\n<p>  The main differentiator from simple markup formats and more complex ones is the ability to define  data and extensions for the format. Norg allows for you to extend its syntax and define data  within clear boundaries - it does this using tags.</p><p>  <b>NOTE</b> Tags are the <i>only</i> way that extensions may be made to the format.</p><p>  There are 6 different tag types, each with their own way of changing the way text in Norg is  interpreted. Before we discuss those, however, we should discuss the syntax rules for tags:</p><ul><li><p>A tag is similar to a <a href=''>detached modifier</a> in the sense that it must begin    at the beginning of a line with optional <a href='#h3-whitespace'>whitespace</a> (but nothing else) preceding it.</p></li><li><p>After that you will encounter a special tag character (<code>=</code>, <code>`, `@`, `#`, `+` and `.`), /none/\n    of which are attached modifiers (see {^ disambiguating tags and attached modifiers}). The\n    special tag character is then /immediately/ followed by text, which becomes the /tag name/. Said\n    tag name can consist of any {# regular characters}[regular character] and/or `-` and `_`.\n  - Tags can have their names delimited by a `.` in order to create a &quot;hierarchy&quot;, e.g.\n    `document.meta`.\n  - ::\n    After a {*** whitespace} character any number of parameters on the same line may follow:\n    |example\n    #tag-name.subtag parameter1 parameter2\n    |end\n    By default parameters are space-separated. In order to create multi-word parameters, you may\n    escape the space character with a backslash (`\\`).\n    |example\n    #tag-name.subtag parameter1\\ with\\ spaces parameter2\n    |end\n    Parameters may consist of any character (apart from a {*** line endings}[line ending], of course).\n    ---\n\n  ^ Disambiguating tags and attached modifiers\n    If tag characters were attached modifier openers there would be no way to know whether the\n    character is an attached modifier opener or a tag opener until the whole line has been parsed;\n    in other words, such a scenario would entail a difficult to resolve ambiguity.\n\n  Norg provides several inbuilt tag names that are reserved, but their details are not explained\n  in this specification - this document strictly covers syntax - see the [semantics document] for a\n  list of the built-in tags. There is no restriction in regard to the length of a tag name, nor are\n  there any disallowed names that a parser should omit (unless they don&apos;t adhere to the above rules\n  regarding tag names).\n\n** Ranged Tags\n   Ranged tags are a way to express custom information within a range.\n   They begin with the traditional tag declaration and are ended with an `end` statement.\n\n   The `end` statement has a simple rule set:\n   - Must be at the start of a line, may be preceded by any {*** whitespace} (but nothing else)\n   - Must use the same prefix as its parent (in the case of standard ranged tags: `</code>; in the case     of verbatim tags: <code>@</code>; for macro tags: <code>=</code>)</p></li><li><p>Must <b>immediately</b> be succeeded by a <a href='#h3-line-endings'>line ending</a>.</p></li></ul><section id='section-h3-macro-tags'>\n<h3 id='h3-macro-tags'>Macro Tags</h3>\n<p>    Macro tags (also known as <i>macro definitions</i>) are a tag type designed to declare and define    macros. Macros are templates that can be executed with parameters in order to place some    structured text into the document.</p><p>    The content of the macro tag is <i>any</i> Norg markup - this includes <a href='#h2-structural-detached-modifiers'>structural detached\n    modifiers</a> and nested <a href='#h1-tags'>tags</a>. The macro tag is closed with the <code>=end</code> statement.</p><p>    Under the hood, all other <a href='#h1-tags'>tag</a> types are implemented as macros with special parameters    and contents.</p><p>    The following is an example of a macro:    |example    =see url    (see <a href='&amp;url&amp;'>&amp;url&amp;</a>)    =end    |end</p><p>    It can then be invoked using any of the other tag types, for example the <a href='#h2-infirm-tag'>infirm tag</a>:    |example    This is a recipe for a cake    .see https//wikipedia.com/some-cool-cake-recipe    - let&apos;s begin cooking!    |end    After macro expansion, this is what the document would look like:    |example    This is a recipe for a cake    (see <a href='https://wikipedia.com/some-cool-cake-recipe'>https://wikipedia.com/some-cool-cake-recipe</a>)    - let&apos;s begin cooking!    |end</p><p>    Which, when reformatted, would look (and render) like so:    |example    This is a recipe for a cake (see <a href='https://wikipedia.com/some-cool-cake-recipe'>https://wikipedia.com/some-cool-cake-recipe</a>) - let&apos;s begin    cooking!    |end</p>\n</section>\n<section id='section-h3-standard-ranged-tags'>\n<h3 id='h3-standard-ranged-tags'>Standard Ranged Tags</h3>\n<p>    There are times when you may want to create an isolated block of Norg markup.    To do this you may use the standard ranged tag, which uses the <code>` character.\n\n    Currently, it is only used for four tags, `comment`, `example`, `details` and `group`:\n    - The `comment` ranged tag is used for long strings of comments (versus the `%` null attached\n      modifier, which is mostly used for short comments).\n    - The `example` tag is a simple way to show an example of some Norg markup without it being\n      rendered and treated as physical markup (most commonly used throughout this very document to\n      show unrendered examples of Norg syntax).\n    - The `details` tag is a way to hide away markup (just like\n      {https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details}[`&lt;details>`] in HTML).\n      - The `group` tag may be used to group together many elements and apply a global {*** strong\n        carryover tags}[strong carryover tag] to each one of them.\n\n**** Examples\n     `|example`:\n     |example\n     |example\n     * This is an example heading.\n     |end\n     |end\n\n     `|comment`:\n     |example\n     |comment\n     This is a very long comment with some content\n     and with some markup!\n\n     * Heading\n       /italic/ and *bold*.\n     |end\n     |end\n\n     `|details`:\n     |example\n     |details\n     * Here is some hidden markup!\n       Wowzers.\n     |end\n     |end\n\n     `|group`:\n     |example\n     #color red\n     |group\n     This will be red.\n\n     So will this.\n\n     * So will this\n       And this.\n     |end\n     |end\n\n**** Edge Cases and Semantic Interpretation\n     A commonly arising question is &quot;how are these interpreted at parse time?&quot; - can you link to\n     elements within `|comment` tags? What governs the behavior of these differing tags?\n\n     The answer may be illustrated simply by showing how these tags are implemented.\n     As mentioned in the {*** macro tags} section, all tag types (apart from the macro tag) are a\n     macro invocation under the hood. Below are the implementations for `|comment` and `|group`,\n     respectively:\n     - :\n       |example\n       =comment ...\n       =end\n       |end\n     - :\n       |example\n       =group ...\n       &amp;...&amp;\n       =end\n       |end\n\n     The `|comment` tag evaluates to /no value/. Anything that is placed within a comment during\n     invocation (the `...` parameter) is simply dropped. Because of this it is *not* possible to\n     link to elements within comment tags. The `|group` tag returns everything that you give\n     it, because of this it *is* possible to freely link to any element within a `|group`.\n\n     To summarize - the behavior of each individual standard ranged tag is fully governed by its\n     implementation - see the [semantics document] for more details.\n\n*** Verbatim Ranged Tags\n    In other cases you may be more interested in an isolated block /without/ Norg markup (i.e. a\n    /verbatim/ block). A prime example of this is `@code`, which creates a code block - you\n    obviously don&apos;t want nested Norg syntax within that! Note how in the following example the\n    `@MyAnnotation` would clash with Norg&apos;s verbatim ranged tag syntax, but doesn&apos;t as no nested\n    markup is allowed within:\n    @code java\n    @MyAnnotation(name=&quot;someName&quot;, value=&quot;Hello World&quot;)\n    public class TheClass {\n      // ...\n    }\n    @end\n    This ranged tag type is the most commonly used one as it has the widest range of applications.\n    The {*** standard ranged tags}[standard ranged tag] is a much more niche syntax element targeted\n    at specific use cases.\n\n** Carryover Tags\n   Carryover tags are a construct used to assign certain properties to the next item or whole\n   {# objects}[object].\n\n   /Note/: Internally, they are a type of {** macro tags}[macro tag], where the next element is given\n   as the last parameter to the macro. For more info see {*** macro tags} and the [semantics document].\n\n   There are two types of carryover tag, the {*** weak carryover tags}[weak carryover tag] and the\n   {*** strong carryover tags}[strong variant].\n\n*** Weak Carryover Tags\n    The weak carryover tag affects the next element and next element /only/. It does not work with\n    whole collections of elements (see {*** strong carryover tags}).\n\n    Weak carryover tags only apply to the next element; their behavior is as follows:\n    - When the element has children, the weak carryover tag only applies to the single item (it does\n      not carry over to its children).\n    - When the element is part of an {# object}, no items other than the one below the weak\n      carryover tag is affected.\n    - An exception is made when a weak carryover tag is applied to an {# indent segment} or a\n      {** ranged tags}[ranged tag], in which case everything within that segment/tag is affected.\n\n**** Examples\n     Only the second item is affected:\n     |example\n     - List item 1\n     +color red\n     - List item 2 (which is red)\n     - List item 3 (which is normal-colored)\n     |end\n\n     Only the `Heading 1` and `This is some content` text is highlighted:\n     |example\n     +color red\n     * Heading 1 (which is red)\n       This is some content. (which is still red)\n     ** Heading 2 (which is normal-colored)\n        This is also some content. (which is normal-colored)\n     |end\n\n     Special behavior for indent segments:\n     |example\n     - List item 1\n     +color red\n     - List item 2 (which is red)\n     -- But this isn&apos;t red\n     -- Neither is this\n     +color green\n     - ::\n       This is green.\n\n       -- This is also green\n       -- And so is this.\n       ---\n     |end\n\n*** Strong Carryover Tags\n    Contrary to its {*** weak carryover tags}[weak variant], the strong carryover tag exists to\n    annotate an entire {# object} versus just a single item. Its behavior is opposite to its weak\n    counterpart, namely:\n    - When the element has children, the strong carryover tag applies to both the whole item and all\n      of its children.\n    - When the element is part of an {# object}, all items in the object are affected.\n\n**** Examples\n     A nice use case is the `#choice` carryover tag, which converts all items in a list into a\n     single-choice question with right/wrong answers:\n     |example\n     What is your favorite activity? Hint: there&apos;s only one correct answer :)\n     #choice\n     - ( ) Sleeping\n     - ( ) Learning\n     - (x) Writing `.norg` documents\n     |end\n\n     Here, both the level 1 heading and the level 2 heading along with their contents will be\n     colored red:\n     |example\n     #color red\n     * Heading 1\n       This is some content.\n     ** Heading 2\n        This is also some content.\n     |end\n\n*** Carryover Tags and Paragraphs\n    A feature of {** carryover tags} which we have not discussed yet is how they interact with\n    {** paragraphs} (and {** paragraph segments}). The following simple rules apply:\n    - {*** strong carryover tags} affect the next {** paragraphs}[paragraph]\n    - {*** weak carryover tags} affect the next {** paragraph segments}[paragraph segment]\n\n    For example:\n    |example\n    #color blue\n    This entire paragraph\n    will now appear in blue\n    color.\n\n    This next paragraph is normal-colored.\n    +color red\n    But this single line is colored red,\n    whereas this line is normal-colored again.\n\n    #color blue\n    This part is blue,\n    +color red\n    but the latter carryover tag takes precedence, making this part red,\n    and this part blue again, since the weak carryover tag does not affect this segment.\n    |end\n\n** Infirm Tag\n   The infirm tag is the simplest form of executing a macro. It is a single-line, embeddable macro\n   invocation with the ability to supply parameters. It is denoted with the `.` character.\n\n   Below is an example:\n   |example\n   =LoremIpsum\n   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n   labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n   nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\n   velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n   proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n   =end\n\n   This is a paragraph, and below you will find the lorem ipsum text:\n   .LoremIpsum\n   This is still the same paragraph (assuming the macro invocation only inserted text; which it did\n   in this specific example).\n   |end\n\n* Attached Modifiers\n  This section discusses attached modifiers (which originally gave rise to the name of {* detached\n  modifiers} as their natural counter-parts). Attached modifiers encapsulate some text within a\n  {** paragraphs}[paragraph] and change the way it is displayed in the document.\n  An attached modifier consists of two parts: the /opening modifier/ and the /closing modifier/.\n\n  Below are the general rules for attached modifiers:\n  - An opening modifier may only be preceded by {# whitespace} or {# punctuation}\n  - An opening modifier may _NOT_ be succeeded by {# whitespace}\n  - A closing modifier may _NOT_ be preceded by {# whitespace}\n  - A closing modifier may only be succeeded by {# whitespace} or {# punctuation}\n  +name attached modifier range\n  - ::\n    {* Attached modifiers} can only span at maximum a single {# paragraphs}[paragraph], i.e. they get\n    terminated as soon as they encounter a {# paragraph break}.\n\n    This means that this:\n    |example\n    *this\n\n    text*\n    |end\n    will *not* result in any bold text, as it&apos;s divided by a {# paragraph break}.\n    However, this:\n    |example\n    *this\n    text*\n    |end\n    is fine, and will result in *`this text`* being bold.\n  - Nested {* attached modifiers} should be closed in the opposite order they were opened.\n  - Two or more consecutive attached modifiers of the same type (i.e. `**`, `//` etc.) should be\n    instantly &quot;disqualified&quot; and parsed as raw text in /all/ circumstances and without any\n    exceptions.\n\n  Their name should be rather self-explanatory - both the opening and closing modifier are\n  /attached/ to one another.\n\n  The following attached modifiers exist and have respective meaning:\n  - \\*bold\\*: *bold*\n  - \\/italic\\/: /italic/\n  - \\_underline\\_: _underline_\n  - \\-strike-through\\-: -strike-through-\n  - \\!spoiler\\!: !spoiler!\n  - \\^superscript\\^: ^superscript^ (cannot be nested into `subscript`)\n  - \\,subscript\\,: ,subscript, (cannot be nested into `superscript`)\n  - \\`inline code\\`: `inline code` (disables any nested markup - verbatim)\n  - \\%{** Null Modifier}[null modifier]\\%: %null modifier%\n  - \\$inline math\\$: $f(x) = y$ (verbatim)\n  - \\&amp;variable\\&amp;: &amp;variable&amp; (verbatim)\n\n** Valid Examples\n   |example\n   *Bold text*\n\n   *Bold text*,\n   .*Bold text*,\n\n   *Bold\n   text*\n\n   */Bold and italic/* &lt;- closing modifiers closed in the opposite order they were opened\n   */Bold and italic/ and only bold*\n\n   Text */with/ _different_ ^markup^ !types!*\n   |end\n\n** Invalid Examples\n   |example\n   * Bold text *\n\n   *Bold text *\n\n   other text*Bold text*\n\n   *Bold text*other text\n\n   *\n   Bold text*\n\n   *Bold\n   text\n   *\n\n   *Bold\n\n   text*\n\n   Closed in the wrong order:\n   */Bold and italic*/\n\n   Also closed in the wrong order:\n   */Bold and italic* and only italic/\n   |end\n\n** Null Modifier\n   This section expands a bit on the concept of the `%null modifier%` in order to understand\n   some of its use cases.\n\n   When used in a standalone fashion, the null modifier nullifies (removes) all of the text inside.\n   This means that on its own it behaves like a comment, which is never rendered:\n   |example\n   Cats %TODO: create section about cats% are very cute animals.\n   |end\n\n   In higher {* layers}, this modifier can have its behaviour extended with the {** attached modifier\n   extensions}[attached modifier extension] syntax, which essentially makes it a configurable\n   modifier suit for many occasions. For example, if you wanted to make an arbitrary part of your\n   text red, you may do:\n   |example\n   This part of the text is %colored red%(color:red)!\n   |end\n\n** Variables\n   Variables are a {** layer 5} attached modifier that allow a user to invoke a macro without any\n   parameters and place the result inside e.g. a paragraph. For more information on their\n   behavior see the [semantics document].\n\n** Free-form Attached Modifiers\n   Even with all the rules described in the above sections there are still some evident limitations\n   with attached modifiers, namely:\n   - Arbitrary {*** whitespace} within {* attached modifiers} is not permitted: `*  bold  *` is\n     invalid and thus not bold.\n   - Representing verbatim attached modifier chars within the corresponding verbatim blocks is not\n     possible: `</code>I cannot place a (<code>) char inside here without accidentally terminating the\n     block.|</code>.</p><p>   Free-form modifiers fix this with a special syntax to specify the beginning and end of a ranged   block. For example:   |example   Here, I can write <code> leading and trailing whitespace (with a ` char)  </code> within a verbatim block   without accidentally terminating it.</p><p>   Here, I can use a literal <code>$</code> inside inline math: $ 10$ + 10$ = 20$ $.   |end</p><p>   The use of pipes is special because the position of the pipe (i.e. whether it&apos;s before or after the   attached modifier) can unambiguously tell us whether that symbol is an opening attached modifier   or a closing one. It&apos;s thanks to this that whitespace is freely allowed within its content.</p><p>   Aside from the details described above, free-form attached modifiers have the following properties:</p><ul><li><p>Backslashes (<code>\\</code>) are treated as verbatim and do not mean an <a href='#h3-escaping'>escape sequence</a>     (see <a href='#h1-precedence'>precedence</a>).</p></li><li><p>Despite being called &quot;free-form&quot; they can still only span a single paragraph (see <a href=''>attached\n     modifier range</a>).</p></li></ul>\n</section>\n<section id='section-h2-link-modifier'>\n<h2 id='h2-link-modifier'>Link Modifier</h2>\n<p>   The link modifier, <code>:<code>, is a special modifier type - it puts a twist on the original attached\n   modifier rules - in fact, it&apos;s the polar opposite.\n\n   As described in the {* attached modifiers} section, attached modifier types may not exist\n   in between words like so:\n   |example\n   abso/freaking/lutely!\n   |end\n\n   It&apos;s entirely plausible to want to do this however, which is why the {** link modifier}[link\n   modifier] was devised. With it, you can bridge attached modifiers and regular text together:\n   |example\n   abso:/freaking/:lutely!\n   |end\n\n   It is important to note that link modifiers do not need to occur in pairs. This:\n   |example\n   Ex:*ample* text\n   |end\n   Will also result in `ample</code> becoming *bold*. In fact, using a link modifier at the end will not\n   give the desired result (it will be rendered as a regular `:</code> char). To understand why keep   reading.</p><p>   Through the examples above it is evident that there are two link modifier types: one where the   link modifier is an <i>opening</i> link modifier (i.e. it appears before an opening attached modifier)   and one where it&apos;s a <i>closing</i> link modifier (i.e. it appears after a closing attached modifier).   This distinction is visible even when they don&apos;t occur in pairs.</p><p>   In the case that the link modifier is opening (the attached modifier appears on the right):</p><ul><li><p>The link modifier may only be preceded by a <a href=''>regular character</a>     (or, in other words, may <i>not</i> be preceded by a <a href='#h3-punctuation'>punctuation</a> character nor by a     <a href='#h3-whitespace'>whitespace</a> character).</p></li><li><p>The link modifier may only be succeeded by an opening attached modifier.</p></li></ul><p>   In the case that the link modifier is closing (the attached modifier appears on the left):</p><ul><li><p>The link modifier may only be preceded by a closing attached modifier.</p></li><li><p>The link modifier may only be succeeded by a <a href=''>regular character</a>.</p></li></ul><p>   If the above conditions are not met, then the character should be treated as a literal <code>:<code>.\n\n** Attached Modifier Extensions\n   Similarly to {** detached modifier extensions}, attached modifier extensions serve as a way\n   to attach metadata to {* attached modifiers}.\n   The metadata that you can attach, however, differs from {** detached modifier extensions}, as they\n   serve different use cases.\n\n   The content of attached modifier extensions consists of a set of references to many\n   {*** attributes}. These attributes are delimited by the {* contextual `|</code> delimiter}.\n   If the attribute is part of a hierarchy (see {*** attributes}), you may use the `:</code>   character to link them together. Some inbuilt attributes are the <code>lang</code> and <code>color</code> hierarchies   (a comprehensive list can be found in the <a href='#'>semantics document</a>).</p><section id='section-h3-examples'>\n<h3 id='h3-examples'>Examples</h3>\n<p>    |example    <code>print(&quot;This is some python&quot;)</code>(lang:python) &lt;- The lang:python attribute highlights the text as python    *some green and bold text!*(color:green)    &lt;- some green and bold text    <a href='#h1-link-location'>this is an important link</a>(important|color:red) &lt;- Highlights the link as big,                                                                         bold (important) and red.    |end</p>\n</section>\n\n</section>\n\n</section>\n<section id='section-h1-contextual-delimiter-the-pipe-character-is-a-really-nice-character-it-can-be-applied-to-many-problems'>\n<h1 id='h1-contextual-delimiter-the-pipe-character-is-a-really-nice-character-it-can-be-applied-to-many-problems'>Contextual <code>` Delimiter\n  The pipe (`</code>) character is a really nice character - it can be applied to many problems</h1>\n<p>  and expressively represent certain behaviors, specifically <i>delimiting</i>. While also used for  <a href='#h3-standard-ranged-tags'>standard ranged tags</a> and <a href='#h2-free-form-attached-modifiers'>free-form attached modifiers</a>, the pipe symbol is also used as  a delimiter for <a href='#h2-detached-modifier-extensions'>detached</a> and <a href='#h2-attached-modifier-extensions'>attached</a> modifier extensions. Even though it&apos;s used 3 times for different purposes,  the contexts in which they are used in allows for them to be unambiguous. It also keeps intent  consistent across the format.</p>\n</section>\n<section id='section-h1-intersecting-modifiers'>\n<h1 id='h1-intersecting-modifiers'>Intersecting Modifiers</h1>\n<p>  Norg is a syntax designed to be used by many - this includes many styles and preferences. Although  it&apos;s impossible to satisfy everyone, there are some variations of syntax that can be used to  &quot;beautify&quot; Norg markup.  The intersecting modifier does just that - it&apos;s a way to intersect two different paragraph  segments (and <b>only</b> paragraph segments) together on the same line.</p><p>  The syntax is as follows:</p><ul><li><p>First, a <a href='#h3-whitespace'>whitespace</a> character must be matched</p></li><li><p>Next, the actual modifier (currently only <code>:<code>) must be matched.\n  - The token ends with another {*** whitespace} character.\n\n  The use case for the intersecting modifier is best illustrated by example:\n  |example\n  $ Term\n    This is a definition of that term.\n  |end\n  This is perfectly normal syntax that you would write day to day in Norg. But what if you&apos;re more\n  of a fan of one-liners? The `| : |</code> intersecting modifier (currently the only modifier of this\n  type) can be used to do just this:\n  |example\n  $ Term : This is a definition of that term.\n  |end\n  This syntax is especially favored for {*** table cells}:\n  |example\n  : A1 : Content of the cell at A1\n  : A2 : Content of the cell at A2\n  |end\n\n  The `| : |</code> syntax expands to a newline, which means that after expansion you get:  |example  : A1  Content of the cell at A1  : A2  Content of the cell at A2  |end</p></li></ul>\n</section>\n<section id='section-h1-linkables'>\n<h1 id='h1-linkables'>Linkables</h1>\n<p>  Finally, there is one more kind of inline syntax which is the <a href=''>linkables</a> kind.  Linkables can link to any element <i>anywhere</i> in the document.</p><p>  When resolving links, the first match should always be the only match, starting from the top of  the document and heading towards the bottom. This means that if there are two matches, the one at  the topmost part of the document should be chosen as the target.</p><p>  Linkables are comprised of many segments, and can change meaning depending on the order those  segments were defined in.</p><p>  Linkables are essentially a more lenient version of the <a href='#h1-attached-modifiers'>attached modifier</a> syntax. Below are the rules for linkables:</p><ul><li><p>An opening modifier may be instantly succeeded with anything <i>but</i> a <a href=''>line ending</a>.</p></li><li><p>A closing modifier may <b>not</b> be preceded by a <a href=''>line ending</a>.</p></li></ul><p>  Below are a few examples of invalid linkables:  |example  this is not a {</p>\n</section>\n<section id='section-h1-linkable'>\n<h1 id='h1-linkable'>linkable}</h1>\n\n</section>\n<p>  nor is this a <a href='#'>linkable  </a></p><p>  &lt;  this certainly isn&apos;t a linkable  >  |end</p><p>  <b>An unclosed linkable may be treated as an error in the resulting syntax tree</b>.</p><section id='section-h2-link-location'>\n<h2 id='h2-link-location'>Link Location</h2>\n<p>   The link location is defined through curly braces (<code>{}</code>) and contains the physical location   that the user would like to link to. Inside these curly braces you can find one (or more; with   limited inter-compatibility) of the following types of data:</p><ul><li><p>A <a href=''>file location</a></p></li><li><p>A <a href=''>line number</a></p></li><li><p>A <a href='#h3-url'>URL</a> (most commonly to an external resource)</p></li><li><p>A <a href=''>detached modifier</a> followed by the name of the linkable</p><ul><li><p><a href=''>nestable detached modifiers</a> can<b>NOT</b> be linked to</p></li></ul></li><li><p>A <a href=''>custom detached modifier</a> specifically made for links (<code>/</code>,     <code>#</code>, <code>?</code>, <code>=</code>)</p></li><li><p>A <a href='#h4-timestamps'>timestamp</a></p></li></ul><section id='section-h3-file-location'>\n<h3 id='h3-file-location'>File Location</h3>\n<p>    The file location is a construct that allows you to specify the <i>target file</i> into which you    want to link to. This allows you to <b>link to targets within other files</b> or just link to other    Norg files entirely.</p><p>    When standalone, the link syntax will simply point to another <code>.norg</code> file relative to the    current file the link is contained in:</p><p>    |example    <a href='path/to/other-file'>path/to/other-file</a>    |end</p><p>    Note that you do <b>not</b> provide the <code>.norg</code> extension within the path.<div class='name-path-modifiers'>    You may use traditional modifiers in your path, like <code>/</code> (in e.g. <code>/my/file</code>) to signify the</div>    root of your file system, <code>~</code> (in e.g. <code>~/Documents/my-file</code>) to signify the current user&apos;s home    directory, <i>or</i> you can use the <a href='#'>Neorg</a>-specific <code>$</code> (in e.g. <code>$/my/file</code>) to signify the <ins>root</ins>    of the <a href='#'>Neorg</a> workspace.    Since not all Norg files will be used strictly by <a href='#'>Neorg</a>, the workspace root can be    implementation-specific - for git repos the workspace root could be simply the root of the    repository, and for other note-taking apps it could simply be the root of the directory where    all the notes are stored.    A file location may <i>only</i> be accompanied by a <a href=''>detached modifier</a>, <a href=''>line number</a> or <a href=''>the magic char</a>, in which case the links look like so:    |example    <a href='path/to/file##l-123'>path/to/file##l-123</a>    <a href='path/to/file#'>path/to/file#</a>    <a href='path/to/file##h2-level-2-heading'>path/to/file##h2-level-2-heading</a>    |end</p><p>    <code>/</code>, <code>@</code> and URLs are not allowed in combination with file locations:</p><p>    |example    <a href='path#file'>path#file</a> &lt;- invalid    <a href='path#'>path#</a> &lt;- invalid    <a href='path#https://my-url'>path#https://my-url</a> &lt;- also invalid    |end</p>\n</section>\n<section id='section-h3-line-number'>\n<h3 id='h3-line-number'>Line Number</h3>\n<p>    You can also link to a set line number within the current (or other Norg) file.</p><p>    The syntax is as follows:    |example    Line 1    Line 2</p><p>    This is a reference to line <a href='#l-2'>#l-2</a>.    This is a reference to line <a href='file##l-4'>file##l-4</a> in a different file.    |end</p><p>    Disambiguating line numbers and URIs is quite simple - URIs do not begin with digits.</p>\n</section>\n<section id='section-h3-url'>\n<h3 id='h3-url'>URL</h3>\n<p>    You can define a link to an external resource by simply putting in the URL:</p><p>    |example    <a href='https://github.com/nvim-neorg/neorg'>https://github.com/nvim-neorg/neorg</a>    |end</p><p>    Actions related to schemas like <code>https://</code>, <code>ftp://</code> etc. (when attempting to open the link) are    handled by a lower level component running Norg, e.g. <a href='#'>Neorg</a> or the underlying Operating    System.</p>\n</section>\n<section id='section-h3-detached-modifier'>\n<h3 id='h3-detached-modifier'>Detached Modifier</h3>\n<p>    Norg allows you to link to any <a href='#h2-structural-detached-modifiers'>structural</a> or    <a href='#h2-range-able-detached-modifiers'>range-able</a> detached modifier:</p><p>    |example</p>\n</section>\n\n</section>\n<section id='section-h1-i-am-a-level-1-heading'>\n<h1 id='h1-i-am-a-level-1-heading'>I am a level 1 heading</h1>\n\n</section>\n<p>    Strict link to a level 1 heading:    <a href='#h1-i-am-a-level-1-heading'>I am a level 1 heading</a>    |end</p><p>    The inside of the link location looks just like a detached modifier definition, and that is    because it pretty much is. You can substitute the <code>*</code> char for any other    <a href='#h2-structural-detached-modifiers'>structural</a> or <a href='#h2-range-able-detached-modifiers'>range-able</a>    detached modifier, <i>except</i> &quot;ranged&quot; versions of said modifiers - those are <b>disallowed</b> within    the link syntax. By this we mean that syntax like <code>{$$ Text}</code> is <ins>invalid</ins>. To link to a ranged    definition you would still use <code>{$ Text}</code>, there is no reason to make a distinction between a    ranged and non-ranged detached modifier as both have the same meaning, one just allows more    content to exist within itself.</p><section id='section-h3-custom-detached-modifiers'>\n<h3 id='h3-custom-detached-modifiers'>Custom Detached Modifiers</h3>\n<p>    Apart from linking to the detached modifiers outlined above, you can also link to a set of    custom modifiers specifically designed for links. These are the <code>#</code> (magic), <code>/</code> (file), <code>@</code>    (timestamp), <code>?</code> (wiki link) and <code>=</code> (extended) linkable locations.</p><section id='section-h4-the-magic-char'>\n<h4 id='h4-the-magic-char'>The Magic Char (<code>#</code>)</h4>\n<p>     Sometimes you simply want to be lazy, or you want to link to an <a href=''>inline     linkable</a> that does not have a dedicated modifier to denote it - in these scenarios you would     use the magic char: <code>#</code>. It links to <i>any</i> item type. The syntax is exactly the same as with     the other modifiers: <code>{# My Location}</code>.</p>\n</section>\n<section id='section-h4-the-file-linkable'>\n<h4 id='h4-the-file-linkable'>The File Linkable (<code>/</code>)</h4>\n<p>     Sometimes you may want to link to an external file that is not a Norg file.     In that case you may use <code>{/ /path/to/my/file.txt}</code> (notice the mandatory space after the <code>/</code>     char, just like with the <a href=''>detached modifier</a>s). Paths are relative to the Norg file that     contains the link unless started with a <code>/</code> to denote your file system root.</p><p>     In addition to just providing a path, you may also specify a line number at the end via a colon <code>:<code>.\n     Example:\n     |example\n     {/ my-file.txt:123} &lt;- This is a link to `my-file.txt</code> at line 123\n     |end\n\n     As with the {*** file location : # path modifiers}[path modifier] syntax, the file linkable\n     also supports special characters like `~</code> for the user&apos;s home directory and the special <code>$</code>     character to denote the root of the current workspace.</p>\n</section>\n<section id='section-h4-timestamps'>\n<h4 id='h4-timestamps'>Timestamps (<code>@</code>)</h4>\n<p>     The syntax for timestamps within links is the same as the syntax used in the     <a href='#h4-timestamp-extension'>timestamp extension</a>.</p><p>     Example:     |example     Frank&apos;s birthday is on <time datetime=''>5th May</time>.     |end</p>\n</section>\n<section id='section-h4-wiki-links'>\n<h4 id='h4-wiki-links'>Wiki Links (<code>?</code>)</h4>\n<p>     When building large knowledge bases it&apos;s sensible to want to quickly create links between files     without worrying about the location of said file. The <b>wiki link</b> allows you to link to any     heading in any file in the current workspace. You don&apos;t specify any file paths within the link,     just the title of the heading you want to search for.</p><p>     Syntax:     |example     Cats are <a href='/mammals'>mammals</a>, they make for great <a href='/house pets'>house pets</a> too!     |end</p><p>     For developers implementing this behavior: there are no restrictions in which order you parse     your files to hop between wiki links, as long as the following conditions are met:</p><ul><li><p>The current file is the first file that is searched (this allows for <code>?</code> to also work as a       generic catchall link for all heading levels)</p></li><li><p>All files in the current workspace are parsed/enumerated (including subdirectories)</p></li></ul><section id='section-h5-additional-behaviors-with-file'>\n<h5 id='h5-additional-behaviors-with-file'>Additional Behaviors With <code>{:file:}</code></h5>\n<p>      The wiki link can also be used with the <code>{:file:}</code> to limit the search. It can actually double      as a &quot;heading catchall&quot; operator as mentioned in the previous section - it will match all      headings regardless of nesting level in the file provided.</p>\n</section>\n\n</section>\n<section id='section-h4-extendable-links'>\n<h4 id='h4-extendable-links'>Extendable Links (<code>=</code>)</h4>\n<p>     Apart from having links with set behaviors Norg also features an extendable link marked with     the <code>=</code> character. This link has its behaviors governed by <a href='#h2-attached-modifier-extensions'>attached modifier extensions</a>     supplied to the link and by the software running the Norg format (e.g. <a href='#'>Neorg</a>).</p><p>     Syntax:     |example<div bibliography='./myreferences.bib'>     % my_bibliography</div>     This is a reference to a bibliography: <a href='= Neorg2022'>= Neorg2022</a>(my_bibliography).     |end</p><p>     For a more detailed explanation of the behavior of this link consult the <a href='#'>semantics document</a>.</p>\n</section>\n\n</section>\n<section id='section-h3-inline-linkables'>\n<h3 id='h3-inline-linkables'>Inline Linkables</h3>\n<p>    Although most linkable items are either <a href=''>structural</a> or    <a href=''>range-able</a>, there are also syntax elements in Norg that    are inline - these are the <code>#name</code> <a href=''>carryover tag</a> and the    <a href='#h2-inline-link-targets'>inline link target</a>. Both of these can only be linked to through the    <a href=''>the magic char</a>.</p>\n</section>\n<section id='section-h3-differences-between-file-linkables'>\n<h3 id='h3-differences-between-file-linkables'>Differences Between File Linkables</h3>\n<p>    You may have realized that there are many ways to reference a file:</p><ul><li><p><code>{:my/file:}</code></p></li><li><p><code>{/ my/file.norg}</code></p></li><li><p><code>{file://my/file.norg}</code></p></li></ul><p>    Why are there this many?</p><ol><li><p><code>{:my/file:}</code> is strictly to access <code>.norg</code> files and nothing else. More specifically, it&apos;s       designed to access a resource <i>within</i> a file (<code>{:my/file:* Heading}</code>), with the side effect       of being able to also exist in a standalone fashion (<code>{:my/file:}</code>).</p></li><li><p><code>{/ my/file.norg}</code> is used to link to a file and a file <i>only</i> (vs <code>{:my/file:* Heading}</code>       which links to an element within a file). Although it <i>can</i> link to <code>.norg</code> files, its main       use is to link to non-<code>.norg</code> files instead. Using the <code>/</code> syntax also disallows you from       accessing items within the file.</p></li><li><p><code>{file://my/file.norg}</code> is simply utilizing the <code>file://</code> schema to access a file. This       isn&apos;t <i>the</i> recommended way to link to files, but it exists simply because of URI schemas.</p></li></ol>\n</section>\n<section id='section-h3-scoping'>\n<h3 id='h3-scoping'>Scoping</h3>\n<p>    Within linkables it is possible to narrow down the search of the link via the <code> : </code> scoping    modifier. This modifier can exist because under normal circumstances when parsing e.g. the title    of a heading a <code> : </code> sequence of characters would be considered an <a href='#h1-intersecting-modifiers'>intersecting modifier</a>.</p><p>    Below is an example of the scoping modifier in use:    |example    <a href='#h1-heading-name-level-3-heading'>Heading Name : *** Level 3 heading</a>    |end</p><p>    The search narrows the search to a <code>Level 3 heading</code> <i>within</i> a level 1 heading called <code>Heading\n    Name</code>. This search is descending in terms of nesting, in other words, you <i>cannot</i> do    <code>{*** Heading3 : * Heading1}</code>.</p><p>    This scoping is not limited to any item type. You are free to perform searches like    <code>{$ Definition : $ Nested Definition : ^ Footnote}</code>, which searches for a footnote within a    definition called <code>Nested Definition</code> within a definition called <code>Definition</code>.</p>\n</section>\n<section id='section-h2-link-description'>\n<h2 id='h2-link-description'>Link Description</h2>\n<p>   Link descriptions are denoted by square brackets: <code>[]</code>. They contain the description for either a   <a href=''>link location</a> (by placing the description after the link location or an anchor declaration),   an <a href=''>anchor</a> definition (by placing the description before the link location) or an   anchor declaration (where the <i>only</i> syntax item <b>is</b> the link description). Anchors are   described <a href=''>later on</a>.</p>\n</section>\n<section id='section-h2-links'>\n<h2 id='h2-links'>Links</h2>\n<p>   Links in Norg can exist as a standalone <a href=''>link location</a> in which case their text is used as   the link title (often makes sense for headings):</p><p>   |example   <a href='#h1-i-am-a-standalone-link'>I am a standalone link</a>   |end</p><p>   When a custom description is required, it must be placed <b><ins>after</ins></b> the link location. This makes   sense in terms of writing as you first define where you link to, and then annotate it afterwards:</p><p>   |example   Click <a href='#h1-i-am-a-link'>here</a> to find out more.   |end</p>\n</section>\n<section id='section-h2-anchors'>\n<h2 id='h2-anchors'>Anchors</h2>\n<p>   Norg also has a concept called <b>anchors</b>. These allow you to place a standalone   <a href='#h2-link-description'>link description</a> inside of text (referred to as an <span id='anchor-declaration'>anchor declaration</span>).   The target which this anchor links to can then be <ins>defined</ins> at another place in the document   with an <span id='anchor-definition'>anchor definition</span> which is an initial <a href='#h2-link-description'>link description</a> followed by a   <a href='#h2-link-location'>link location</a>. This is especially useful when you want to link to the same target very   often, like for example a specific website.</p><p>   Below are a few usage examples:   |example   <a href='#'>Neorg</a> is a fancy organizational tool for everyone.</p><p>   I like shilling <a href='https://github.com/nvim-neorg/neorg'>Neorg</a> sorry :(   |end   Here, we <i>declare</i> the anchor once at the top, then <i>define</i> the anchor at the very bottom. The   <code>[Neorg]</code> declaration points directly to the website, just like the definition does. It&apos;s like a   copy + paste of the link location without needing to type it out.</p><p>   Other than the declaration behavior described above anchors have no other special meaning and/or   semantics, and behave just like regular <a href='#h2-links'>links</a> do. This means they can be used as a   substitute for regular <a href='#h2-links'>links</a> should the user prefer the &quot;description + location&quot; syntax   versus the &quot;location + description&quot; syntax.</p><p>   Anchors (like <a href='#h2-links'>links</a>) may also be described by using <code>[...]</code>, in which case the syntax looks   like this: <code>[anchor name][anchor description]</code>.</p>\n</section>\n<section id='section-h2-inline-link-targets'>\n<h2 id='h2-inline-link-targets'>Inline Link Targets</h2>\n<p>   Finally, Norg also has the possibility of placing link targets at arbitrary inline positions in   your document. We call these <a href=''>inline link targets</a> which are formatted inside angled brackets:   <code>&lt;></code>.</p><p>   |example   One thing to mention is <span id='inline-link-targets'>inline link targets</span> - they allow you to link to any location in a   document.</p><p>   ...</p><p>   Refer to <a href=''>inline link targets</a> if you are interested in learning more.   |end</p><p>   An important thing to note is that since inline link targets are - well - inline, they cannot be   directly linked to with a dedicated char in the link syntax. To link to these syntax elements you   may <i>only</i> use <a href=''>the magic char</a>.</p><p>   Unlike <a href='#h2-links'>links</a> and <a href='#h2-anchors'>anchors</a>, <a href=''>inline link targets</a> may <i>not</i> have a description.</p>\n</section>\n<section id='section-h2-valid-invalid-examples'>\n<h2 id='h2-valid-invalid-examples'>Valid/Invalid Examples</h2>\n<section id='section-h3-valid-examples'>\n<h3 id='h3-valid-examples'>Valid Examples</h3>\n<p>    |example    <a href='link'>link</a></p><p>    <a href='#h1-text'>    text</a></p><p>    <a href='#h1-text'>text </a></p><p>    <a href='#h1-some-text'>some\n    text   </a></p><p>    <a href='link'>link</a></p><p>    <a href='link##l-20'>link##l-20</a></p><p>    <a href=''>link\n       text</a></p><p>    <a href='#h1-a-link-to-a-heading'>a link\n    to a heading</a></p><p>    <a href='#h1-text'>content </a></p><p>    <a href='#h1-a-link-to-a-heading'>with    a description</a></p><p>    <a href=''>te    xt</a></p><p>    <a href='#h1-link-to-headings'>heading</a>}<a href='#'><b>markup</b></a>    |end</p>\n</section>\n<section id='section-h3-invalid-examples'>\n<h3 id='h3-invalid-examples'>Invalid Examples</h3>\n<p>    |example    <a href='#h1-text'>text</a></p><p>    <a href='file#https://github.com'>file#https://github.com</a>    <a href='file#file.txt'>file#file.txt</a>    <a href='file#'>file#</a></p><p>    {</p>\n</section>\n\n</section>\n<section id='section-h1-text'>\n<h1 id='h1-text'>text}</h1>\n\n</section>\n<p>    {</p><section id='section-h1-text'>\n<h1 id='h1-text'>text</h1>\n<p>    }</p><p>    <a href='#h1-text'>text\n    </a></p><p>    { * text}</p><p>    <a href='#h1-text'>text</a>[        text    ]</p><p>    <a href='#h1-text'>text    </a></p><p>    <a href='#h1-text'>text</a>[    text]    |end</p>\n</section>\n<section id='section-h1-standard-library'>\n<h1 id='h1-standard-library'>Standard Library</h1>\n<p>  Norg comes loaded with a predetermined set of <a href='#h3-attributes'>attributes</a> and <a href='#h2-macro-tags'>macro tags</a> for  different <a href='#h1-layers'>layers</a> of the syntax. These are defined in the <a href='#'>semantics document</a>.</p>\n</section>\n<section id='section-h1-precedence'>\n<h1 id='h1-precedence'>Precedence</h1>\n<p>  Precedence in Norg is rather simple and intuitive.</p><ul><li><p>All non-inline elements have direct precedence over all inline elements.</p></li><li><p>Inline elements with a deterministic start and end have greater priority than those that don&apos;t.</p></li><li><p>Verbatim elements have greater priority than non-verbatim elements.</p></li></ul><p>  Here&apos;s the full list ordered by decreasing precedence:</p><ol><li><p><a href='#h1-tags'>Tags</a> (<code>#infecting</code>, <code>+carryover</code>, <code>.infirm</code>, <code>\\|standard</code>, <code>@verbatim</code> and <code>=macro</code>)</p></li><li><p><a href=''>Structural detached modifiers</a></p></li><li><p><a href=''>Nestable detached modifiers</a> and <a href=''>range-able detached modifiers</a> (there is no such case    where these could overlap)</p></li><li><p><a href=''>Detached modifier extensions</a></p></li><li><p><a href='#h1-linkables'>Linkables</a> (<code>{}</code>, <code>[]</code>, <code>&lt;></code>)</p></li><li><p>Verbatim <a href=''>free-form attached modifiers</a> (<code>\\|</code><code>`, `\\</code><code>`)\n  ~ {# Escaping}[The escape character] (`\\`)\n  ~ Verbatim {# attached modifiers}\n  ~ Standard (non-verbatim) {# free-form attached modifiers} (`|**</code>, <code>//</code> etc.)</p></li><li><p>Standard (non-verbatim) <a href=''>attached modifiers</a></p></li></ol><p>  Should any extra precedence problems arise (let us know if you find any) they can be disambiguated  through a simple left-to-right precedence approach.</p><p>  Note that although e.g. linkables are above standard attached modifiers, this does not mean that  standard attached modifiers cannot <i>contain</i> linkables, but in case there is an overlap the  linkable will have higher precedence.</p><p>  For example, this is valid:  |example  <b><a href=''>i am a bold link!</a></b>  |end</p><p>  However, in this case:  |example  *am I <a href='#h1-bold'>bold?</a> - no!  |end  The link takes precedence, and no bold is rendered.</p>\n</section>\n<section id='section-h1-layers'>\n<h1 id='h1-layers'>Layers</h1>\n<p>  Norg is built up of layers, or in other words a set of features that a parser/tool can support  depending on how much of the specification they&apos;d like to deal with.</p><p>  It&apos;s recommended to stick to these layers when implementing Norg in your own application (as it&apos;s  easy to tell end users that an application supports e.g. &quot;layer 2&quot; of the Norg specification), but  of course these can&apos;t apply to every possible use case. In such case you can use a <i>custom layer</i>  and pick and choose what you want to support. Just make sure to let your users know which features  you&apos;ve implemented, so they don&apos;t get confused!</p><section id='section-h2-layer-1'>\n<h2 id='h2-layer-1'>Layer 1</h2>\n<p>   The first layers contains a very low level implementation of Norg&apos;s markup for use in e.g. a   messaging application. This includes:</p><ul><li><p><a href='#h1-attached-modifiers'>Attached Modifiers</a> (excluding variables, inline mathematics and the null detached modifier)</p></li><li><p><a href='#h2-links'>Links</a> (only the <a href='#h3-url'>URL</a> type)</p></li><li><p>The <a href='#h3-escaping'>escape sequence char (<code>\\\\</code>)</a></p></li></ul>\n</section>\n<section id='section-h2-layer-2'>\n<h2 id='h2-layer-2'>Layer 2</h2>\n<p>   The second layer outlines the basic structure for a document:</p><ul><li><p><a href='#h2-nestable-detached-modifiers'>Nestable Detached Modifiers</a> (only quotes, lists)</p></li><li><p><a href='#h3-headings'>Headings</a></p></li><li><p><a href='#h1-linkables'>Linkables</a> (broader support for <a href='#h2-links'>links</a> (minus <a href='#h4-timestamps'>timestamps (`@`)</a>,     <a href='#h4-wiki-links'>wiki links (`?`)</a> and <a href='#h4-extendable-links'>extendable links (`=`)</a>), <a href='#h2-anchors'>anchors</a>)</p></li><li><p><a href='#h3-verbatim-ranged-tags'>Verbatim Ranged Tags</a> (<code>@code</code>, etc.)</p></li><li><p><a href='#h2-delimiting-modifiers'>Delimiting Modifiers</a></p></li></ul>\n</section>\n<section id='section-h2-layer-3'>\n<h2 id='h2-layer-3'>Layer 3</h2>\n<p>   This layer is for documents of medium/high complexity:</p><ul><li><p>Support for <a href='#h4-timestamps'>timestamps (`@`)</a> and <a href='#h4-wiki-links'>wiki links (`?`)</a> in     <a href='#h2-links'>links</a></p></li><li><p><a href='#h2-inline-link-targets'>Inline Link Targets</a></p></li><li><p><a href='#h2-carryover-tags'>Carryover Tags</a> (<code>#name</code>, <code>#color</code><i><code>+name</code>, <code>+color</code> etc.)</i></p></li><li><p><a href='#h2-detached-modifier-extensions'>Detached Modifier Extensions</a></p></li><li><p><a href='#h2-detached-modifier-suffix'>Detached Modifier Suffix</a></p></li><li><p><a href='#h2-range-able-detached-modifiers'>Range-able Detached Modifiers</a> (excluding <a href='#h3-table-cells'>table cells</a>)</p></li><li><p><a href='#h2-link-modifier'>Link Modifier</a></p></li></ul>\n</section>\n<section id='section-h2-layer-4'>\n<h2 id='h2-layer-4'>Layer 4</h2>\n<p>   The fourth layer supports 80% of the most commonly used features for writing high level and   typeset Norg documents.</p><ul><li><p>Support for <a href='#h4-extendable-links'>extendable links (`=`)</a> and <a href='#h3-scoping'>scoping</a></p></li><li><p><a href='#h3-standard-ranged-tags'>Standard Ranged Tags</a> (<code>\\|comment</code>, etc.)</p></li><li><p><a href='#h3-table-cells'>Table cells</a></p></li><li><p><a href='#h2-free-form-attached-modifiers'>Free-form Attached Modifiers</a></p></li><li><p><a href='#h1-intersecting-modifiers'>Intersecting modifiers</a></p></li><li><p><a href='#h2-attached-modifier-extensions'>Attached Modifier Extensions</a></p></li><li><p>The inline mathematics (<code>$$</code>) and variable (<code>&amp;&amp;</code>) <a href='#h1-attached-modifiers'>attached modifiers</a></p></li></ul>\n</section>\n<section id='section-h2-layer-5'>\n<h2 id='h2-layer-5'>Layer 5</h2>\n<p>   Layer five can be seen as the ultimate boss - it features the dynamic elements of Norg   documents, including macros, variables and parsing of eval blocks.</p><ul><li><p>Interpretation/Execution of <a href='#h3-macro-tags'>macro tags</a></p></li><li><p>Semantic understanding/execution of all other tag types</p></li><li><p>Evaluation of <code>@code</code> blocks for the <a href='1.0-semantics##h1-nip'>NIP</a> language (if they are marked     with <code>#eval</code>).</p></li></ul>\n</section>\n\n</section>\n<p></p>\n    <section class=\"footnotes\">\n    <ol>\n            <li id='fn_single-footnote'>\n        <p>    Optional footnote content.    |end</p>\n        <a role=\"doc-backlink\" href='#fnref_single-footnote'>↩︎</a>\n    </li>\n    <li id='fn_ranged-footnote'>\n        <p>    Content of the footnote.</p><p>    Which scans up to the closing modifier.</p>\n        <a role=\"doc-backlink\" href='#fnref_ranged-footnote'>↩︎</a>\n    </li>\n    <li id='fn_note-to-parser-developers'>\n        <p>     It should be mentioned that a parser of the Norg format is not required to perform any     timestamp analysis further than detecting what set of characters contain a timestamp.     The actual interpretation of its internal fields and the interpretation of a <a href=''>range</a> are the     responsibility of the <b>semantic analyzer</b> (see also the <a href='1.0-semantics'>semantics document</a>).</p>\n        <a role=\"doc-backlink\" href='#fnref_note-to-parser-developers'>↩︎</a>\n    </li>\n\n    </ol>\n</section>\n\n</div>\n","category":"page"},{"location":"internals/tokens/#Tokens","page":"Tokens","title":"Tokens","text":"","category":"section"},{"location":"internals/tokens/","page":"Tokens","title":"Tokens","text":"Modules = [Norg.Tokens, Norg.Tokenize]","category":"page"},{"location":"internals/tokens/#Tokens-2","page":"Tokens","title":"Tokens","text":"","category":"section"},{"location":"internals/tokens/","page":"Tokens","title":"Tokens","text":"Modules = [Norg.Tokens]","category":"page"},{"location":"internals/tokens/#Norg.Tokens","page":"Tokens","title":"Norg.Tokens","text":"Provides the tokens for the tokenizer.\n\nA Tokens.Token stores its value, a Kinds.Kind and a Tokens.TokenPosition\n\n\n\n\n\n","category":"module"},{"location":"internals/tokens/#Norg.Tokens.Token","page":"Tokens","title":"Norg.Tokens.Token","text":"A Norg Token has a Kinds.kind (i.e. K\"EndLine\"), a position, and a value.\n\nSee also: Tokens.TokenPosition\n\n\n\n\n\n","category":"type"},{"location":"internals/tokens/#Norg.Tokens.Token-NTuple{4, Any}","page":"Tokens","title":"Norg.Tokens.Token","text":" Token(kind, line, char, value)\n\nCreate a Token of kind kind with value value at line and char number char.\n\n\n\n\n\n","category":"method"},{"location":"internals/tokens/#Norg.Tokens.TokenPosition","page":"Tokens","title":"Norg.Tokens.TokenPosition","text":"Stores the position of a token in the input file (line and char).\n\n\n\n\n\n","category":"type"},{"location":"internals/tokens/#Norg.Tokens.char-Tuple{Norg.Tokens.TokenPosition}","page":"Tokens","title":"Norg.Tokens.char","text":"char(x)\n\nReturn the character number in the line corresponding to position or token x.\n\n\n\n\n\n","category":"method"},{"location":"internals/tokens/#Norg.Tokens.line-Tuple{Norg.Tokens.TokenPosition}","page":"Tokens","title":"Norg.Tokens.line","text":"line(x)\n\nReturn the line number corresponding to the position or token x.\n\n\n\n\n\n","category":"method"},{"location":"internals/tokens/#Tokenize","page":"Tokens","title":"Tokenize","text":"","category":"section"},{"location":"internals/tokens/","page":"Tokens","title":"Tokens","text":"Modules = [Norg.Tokenize]","category":"page"},{"location":"internals/tokens/#Norg.Tokenize","page":"Tokens","title":"Norg.Tokenize","text":"Produce Tokens.Token vectors from a string using tokenize.\n\n\n\n\n\n","category":"module"},{"location":"internals/tokens/#Norg.Tokenize.tokenize-Tuple{AbstractString}","page":"Tokens","title":"Norg.Tokenize.tokenize","text":"tokenize(input)\n\nProduce Tokens.Token vectors from an input string.\n\n\n\n\n\n","category":"method"},{"location":"internals/codegen/#Codegen","page":"Codegen","title":"Codegen","text":"","category":"section"},{"location":"internals/codegen/","page":"Codegen","title":"Codegen","text":"Modules = [Norg.Codegen]","category":"page"},{"location":"internals/codegen/","page":"Codegen","title":"Codegen","text":"Modules = [Norg.Codegen]","category":"page"},{"location":"internals/codegen/#Norg.Codegen","page":"Codegen","title":"Norg.Codegen","text":"This module holds all the code generation targets, as well as some generic utilities to help with code generation.\n\n\n\n\n\n","category":"module"},{"location":"internals/codegen/#Norg.Codegen.codegen","page":"Codegen","title":"Norg.Codegen.codegen","text":"codegen(T, ast)\ncodegen(target, ast)\n\nDo code generation for a given AST.NorgDocument to a given target.\n\n\n\n\n\n","category":"function"},{"location":"internals/kinds/#Kinds","page":"Kinds","title":"Kinds","text":"","category":"section"},{"location":"internals/kinds/","page":"Kinds","title":"Kinds","text":"Modules = [Norg.Kinds]","category":"page"},{"location":"internals/kinds/","page":"Kinds","title":"Kinds","text":"Modules = [Norg.Kinds]","category":"page"},{"location":"internals/kinds/#Norg.Kinds","page":"Kinds","title":"Norg.Kinds","text":"To provide a type-stable parser, we handle types ourselves. This is directly inspired by JuliaSyntax.jl. See here\n\nYou can see kinds as an advanced Enum type that allows some kind of grouping of values. We use Kinds.Kind to classify the different types of tokens ast nodes.\n\n\n\n\n\n","category":"module"},{"location":"internals/kinds/#Norg.Kinds._kind_names","page":"Kinds","title":"Norg.Kinds._kind_names","text":"All the defined kind names.\n\n\n\n\n\n","category":"constant"},{"location":"internals/kinds/#Norg.Kinds.Kind","page":"Kinds","title":"Norg.Kinds.Kind","text":"Kind(name)\nK\"name\"\n\nThis is type tag, used to specify the type of tokens and AST nodes.\n\n\n\n\n\n","category":"type"},{"location":"internals/kinds/#Norg.Kinds.kind-Tuple{Norg.Kinds.Kind}","page":"Kinds","title":"Norg.Kinds.kind","text":"kind(x)\n\nReturn the Kind of x.\n\n\n\n\n\n","category":"method"},{"location":"internals/kinds/#Norg.Kinds.@KSet_str-Tuple{Any}","page":"Kinds","title":"Norg.Kinds.@KSet_str","text":"A set of kinds which can be used with the in operator.  For example     k in KSet\"+ - *\"\n\n\n\n\n\n","category":"macro"},{"location":"internals/kinds/#Norg.Kinds.@K_str-Tuple{Any}","page":"Kinds","title":"Norg.Kinds.@K_str","text":"K\"s\"\n\nThe kind of a token or AST internal node with string \"s\". For example\n\nK\">\" is the kind of the greater than sign token\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Norg","category":"page"},{"location":"#Norg","page":"Home","title":"Norg","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Norg.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Norg.jl is a library to work with the norg file format used in neorg. It currently implements the Layer 2 compatibility.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a show-case of how the parser performs, please visit the norg specification rendering page. Note that the specification is not layer-2-friendly, so some parts just do not make sense for now.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#General-usage","page":"Home","title":"General usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are currently two available code generation targets for Norg.jl: HTML and Pandoc JSON. Given a string to barse s, you can use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"norg(HTMLTarget(), s)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"norg(JSONTarget(), s)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sources for the Norg specification are available in an artifact of this package. Thus, you can generate an HTML version of the specification using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Norg\n\ns = open(Norg.NORG_SPEC_PATH, \"r\") do f\n    read(f, String)\nend;\nopen(\"1.0-specification.html\", \"w\") do f\n    write(f, string(norg(HTMLTarget(), s)))\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since Pandoc JSON is also available, you can export to Pandoc JSON and feed it to pandoc:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import JSON\nopen(\"1.0-specification.json\", \"w\") do f\n  JSON.print(f, norg(JSONTarget(), s), 2)\nend;","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then invoke Pandoc as follow:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pandoc -f json -t markdown 1.0-specification.json -o 1.0-specification.md","category":"page"},{"location":"#Advanced-usage","page":"Home","title":"Advanced usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can also generate an Abstract Syntax Tree (AST) that implements AbstractTrees.jl interface using norg. See also the AST module.","category":"page"},{"location":"","page":"Home","title":"Home","text":"norg(s)","category":"page"},{"location":"#Public-API","page":"Home","title":"Public API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Norg]","category":"page"},{"location":"#Norg.Norg","page":"Home","title":"Norg.Norg","text":"Norg.jl provides a way to parse Neorg files in pure Julia.\n\nIt overloads Base.parse with custom targets. So far the only available target is HTMLTarget.\n\nExample usage :\n\nusing Norg\nnorg(HTMLTarget(), \"Read {https://github.com/nvim-neorg/norg-specs}[the spec !]\")\n\n\n\n\n\n","category":"module"},{"location":"#Norg.NORG_SEMANTICS_PATH","page":"Home","title":"Norg.NORG_SEMANTICS_PATH","text":"Path to the Norg semantics specification.\n\n\n\n\n\n","category":"constant"},{"location":"#Norg.NORG_SPEC_PATH","page":"Home","title":"Norg.NORG_SPEC_PATH","text":"Path to the Norg specification.\n\n\n\n\n\n","category":"constant"},{"location":"#Norg.NORG_SPEC_ROOT","page":"Home","title":"Norg.NORG_SPEC_ROOT","text":"The root directory of the Norg specification.\n\n\n\n\n\n","category":"constant"},{"location":"#Norg.NORG_STDLIB_PATH","page":"Home","title":"Norg.NORG_STDLIB_PATH","text":"Path to the Norg standard library.\n\n\n\n\n\n","category":"constant"},{"location":"#Norg.consume_until-Tuple{Norg.Kinds.Kind, Vector{Norg.Tokens.Token}, Any}","page":"Home","title":"Norg.consume_until","text":"consume_until(k, tokens, i)\nconsume_until((k₁, k₂...), tokens, i)\n\nConsume tokens until a token of kind k is encountered, or final token is reached.\n\n\n\n\n\n","category":"method"},{"location":"#Norg.findtargets!-Tuple{Norg.AST.NorgDocument}","page":"Home","title":"Norg.findtargets!","text":"findtargets!(ast[, node])\n\nIterate over the tree to (re)build the targets attribute of the AST, listing all possible targets for magic links among direct children of node.\n\nIf node is not given, iterate over the whole AST, and empty! the targets attribute of the AST first.\n\n\n\n\n\n","category":"method"},{"location":"#Norg.getchildren-Tuple{Norg.AST.Node, Norg.Kinds.Kind}","page":"Home","title":"Norg.getchildren","text":"getchildren(node, k)\ngetchildren(node, k[, exclude])\n\nReturn all children and grandchildren of kind k. It can also exclude  certain nodes from recursion.\n\n\n\n\n\n","category":"method"},{"location":"#Norg.idify-Tuple{Any}","page":"Home","title":"Norg.idify","text":"idify(text)\n\nMake some text suitable for using it as an id in a document.\n\n\n\n\n\n","category":"method"},{"location":"#Norg.norg-Tuple{Any}","page":"Home","title":"Norg.norg","text":"norg([codegentarget, ] s)\n\nParse the input s to an AST. If codegentarget is included, return the result of code generation for the given target.\n\nExamples\n\njulia> norg(\"* Hello world!\")\nNorgDocument\n└─ (K\"Heading1\", 2, 8)\n   └─ (K\"ParagraphSegment\", 4, 7)\n      ├─ Hello\n      ├─\n      ├─ world\n      └─ !\njulia> norg(HTMLTarget(), \"* Hello world!\")\n<div class=\"norg\"><section id=\"section-h1-hello-world\"><h1 id=\"h1-hello-world\">Hello world&#33;</h1></section><section class=\"footnotes\"><ol></ol></section></div>\n\n\n\n\n\n","category":"method"},{"location":"#Norg.parse_norg_timestamp-Tuple{Any, Any, Any}","page":"Home","title":"Norg.parse_norg_timestamp","text":"parse_norg_timestamp(tokens, start, stop)\n\nParse a Norg timestamp to Julia DateTime. A timestamp has the following structure:\n\n<day>,? <day-of-month> <month> <year> <time> <timezone>\n\nRefer to the Norg specification for further explanations.\n\nExample usage:\n\nusing Norg, AbstractTrees\nast = norg\"{@ Wed, 12th Jan - 20th Feb 2022}\"\nnode = first(collect(Leaves(ast)))\nNorg.parse_norg_timestamp(ast.tokens, node.start, node.stop)\n\n\n\n\n\n","category":"method"},{"location":"#Norg.textify-Tuple{Norg.AST.NorgDocument, Norg.AST.Node}","page":"Home","title":"Norg.textify","text":"textify(ast, node)\n\nReturn the raw text associated with a node.\n\n\n\n\n\n","category":"method"},{"location":"#Norg.@norg_str-Tuple{Any, Vararg{Any}}","page":"Home","title":"Norg.@norg_str","text":"Easily parse Norg string to an AST. This can be used in e.g. Pluto notebooks, because Base.show has a method for \"text/html\" type mime for ASTs.\n\njulia> norg\"* Norg Header 1 Example\" NorgDocument └─ (K\"Heading1\", 2, 11)    └─ (K\"ParagraphSegment\", 4, 10)       ├─ Norg       ├─       ├─ Header       ├─       ├─ 1       ├─       └─ Example\n\n\n\n\n\n","category":"macro"},{"location":"#Inner-API","page":"Home","title":"Inner API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The inner API is documented in the Norg internals page.","category":"page"}]
}
